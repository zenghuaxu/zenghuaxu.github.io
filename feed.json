{
    "version": "https://jsonfeed.org/version/1",
    "title": "Zeng HX's Blog",
    "subtitle": "",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/04/13/CO_P7_document/",
            "url": "http://example.com/2024/04/13/CO_P7_document/",
            "title": "CO_P7_document",
            "date_published": "2024-04-13T15:36:14.000Z",
            "content_html": "<h1 id=\"cpu设计文档及思考题\"><a class=\"anchor\" href=\"#cpu设计文档及思考题\">#</a> CPU 设计文档及思考题</h1>\n<h3 id=\"设计草稿\"><a class=\"anchor\" href=\"#设计草稿\">#</a> 设计草稿</h3>\n<h4 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h4>\n<ul>\n<li>工程主要分成两个部分：IO 支持以及异常 / 中断处理，结合教程大致按照以下顺序进行实现：\n<ul>\n<li>CPU 封装</li>\n<li>添加外设 Timer</li>\n<li>实现系统桥</li>\n<li>实现协处理器 CP0</li>\n<li>异常检测和流水</li>\n<li>添加异常处理指令</li>\n<li>进行中断响应</li>\n<li>异常处理程序（mips）</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"各步实现\"><a class=\"anchor\" href=\"#各步实现\">#</a> 各步实现</h4>\n<ul>\n<li>CPU 封装后与外界的接口主要是 clk，reset，IM 的地址和数据，内存空间的地址、数据和字节使能信号以及宏观 PC。另外由于输出需要还要实现 W 级各信号的接口。</li>\n<li>系统桥是纯组合逻辑模块，需要 CPU 的地址、数据、字节使能、PC 以及外设的相应信号。\n<ul>\n<li>CPU-&gt; 外界。设置了 HitDM,HitTimer,HitInt 等信号判断输出设备 / 内存，再输出各个信号。其中最关键的是字节使能信号，例如<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>M</mi><mi>B</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>E</mi><mi>n</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>H</mi><mi>i</mi><mi>t</mi><mi>D</mi><mi>M</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">?</mo><mi>B</mi><mi>y</mi><mi>t</mi><mi>e</mi><mi>E</mi><mi>n</mi><mo>:</mo><msup><mn>4</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>b</mi><mn>0</mn><mo separator=\"true\">;</mo></mrow><annotation encoding=\"application/x-tex\">DMByteEn = (HitDM) ? ByteEn : 4&#x27;b0;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span><span class=\"mclose\">?</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">b</span><span class=\"mord\">0</span><span class=\"mpunct\">;</span></span></span></span></li>\n<li>外界 -&gt;CPU。实现 PrRD 即可。</li>\n</ul>\n<pre><code>assign PrRD  = (HitDM)     ? DM_RD :\n                 (HitTimer0) ? Timer0_RD :\n  \t\t\t\t\t     (HitTimer1) ? Timer1_RD :\n  \t\t\t\t\t     32'b0;  \n</code></pre>\n</li>\n<li>CP0 设置在 M 级。CP0 可以设置在 E/M 级，考虑 store/load 类异常检测放在单独模块里比较清楚，放在了 M 级。<strong>在首次上级未通过以后发现 CP0 寄存器中大多数位为只可读</strong>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">端口</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">clk</td>\n<td style=\"text-align:center\">input</td>\n<td style=\"text-align:center\">时钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">reset</td>\n<td style=\"text-align:center\">input</td>\n<td style=\"text-align:center\">同步复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">en</td>\n<td style=\"text-align:center\">input</td>\n<td style=\"text-align:center\">写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CP0Addr[4:0]</td>\n<td style=\"text-align:center\">input</td>\n<td style=\"text-align:center\">写入地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CP0In[31:0]</td>\n<td style=\"text-align:center\">input</td>\n<td style=\"text-align:center\">写入数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">VPC[31:0]</td>\n<td style=\"text-align:center\">input</td>\n<td style=\"text-align:center\">受害指令 PC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BDIn</td>\n<td style=\"text-align:center\">input</td>\n<td style=\"text-align:center\">受害指令延迟槽标记</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ExcCode[4:0]</td>\n<td style=\"text-align:center\">input</td>\n<td style=\"text-align:center\">异常类型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HWIn[5:0]</td>\n<td style=\"text-align:center\">input</td>\n<td style=\"text-align:center\">外部中断信号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">EXLClr</td>\n<td style=\"text-align:center\">input</td>\n<td style=\"text-align:center\">EXL 复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CP0Out[31:0]</td>\n<td style=\"text-align:center\">output</td>\n<td style=\"text-align:center\">读出数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">EPCOutp[31:0]</td>\n<td style=\"text-align:center\">output</td>\n<td style=\"text-align:center\">EPC 读出</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Req</td>\n<td style=\"text-align:center\">output</td>\n<td style=\"text-align:center\">中断异常请求</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BDOut</td>\n<td style=\"text-align:center\">output</td>\n<td style=\"text-align:center\">延迟槽标记</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>异常检测和流水需要在每一级添加 EXH 输入对应信号和指令信息，<strong>这里需要在原来数据通路中添加每一条指令信息，例如添加了 allCal，Store，Load 流水</strong>。以便判断是否是溢出异常 / 取指（数）异常。实现了 EXH_F，EXH_D，EXH_E，EXH_M 模块，分别检测 pc 异常，syscall 和 RI 异常，溢出异常，Load/Store 类异常。越靠前异常优先级越高。</li>\n<li>异常处理指令在原有基础上简单添加即可。按照原有方式进行译码，添加了 CP0Write 写使能信号以便支持 mfc0 工作，添 4 加 rd 流水以便支持 mt（f）c0 指令和 CP0 交互。eret 通过清空延迟槽使得不执行延迟槽指令，这个过程中的暂停 / 转发包括将 mfc0 的 T_new_D 改为 3,mtc0 的 T_use_rt 改为 2。<strong>首次上机未通过后发现 eret 与 mtc0 存在数据冒险，因此设置了 eret 的暂停信号，这也意味着出现了另一优先级的问题，即 D 级的阻塞信号优先级高于清空信号。</strong></li>\n<li>中断请求 Req 需要传给 D,E,M,W,MDU，触发中断后全部设置为初始值。另外如 Req，则 M 级的字节使能信号应该置 0。</li>\n<li>异常处理程序直接采用模板，采取直接 + 4 跳过方式处理异常。</li>\n</ul>\n<h4 id=\"测试方案\"><a class=\"anchor\" href=\"#测试方案\">#</a> 测试方案：</h4>\n<ul>\n<li>关于指令和异常的检测，采用了之前的指令。例如 add 和 sub 的异常检测，需要检测较小数字不溢出、较大数字不溢出、溢出情况等。</li>\n<li>异常和中断指令的处理，下载了课程组提供的指令当作异常处理指令。将异常处理指令的二进制编码存到另一个文件当中以便 testbench 读入。</li>\n</ul>\n<h4 id=\"思考题\"><a class=\"anchor\" href=\"#思考题\">#</a> 思考题：</h4>\n<ul>\n<li>思考题 1：请查阅相关资料，说明鼠标和键盘的输入信号是如何被 CPU 知晓的？\n<ul>\n<li>鼠标 / 键盘作为外设，映射到某个地址空间当中，通过总线连接到桥芯片，经由桥芯片和 CPU 进行交互。</li>\n<li>当鼠标 / 键盘输入时，产生中断信号，中断控制器将外设对应的中断号发送给 CPU，CPU 根据中断号找到操作系统的中断服务程序地址，进入对应中断服务程序完成相应工作。其中采用了<strong> MMU 技术</strong>使得外设与 CPU 的交互无需经由主存。</li>\n</ul>\n</li>\n<li>思考题 2：请思考为什么我们的 CPU 处理中断异常必须是已经指定好的地址？如果你的 CPU 支持用户自定义入口地址，即处理中断异常的程序由用户提供，其还能提供我们所希望的功能吗？如果可以，请说明这样可能会出现什么问题？否则举例说明。（假设用户提供的中断处理程序合法）\n<ul>\n<li>中断异常处理的流程固定。因此统一中的断处理程序有助于全面覆盖各种情况，保证处理的统一性和正确性。</li>\n<li>本 CPU 未实现用户自定义中断处理功能。但支持自定义的 CPU 应该可以实现。如果实现了自定义中断入口的 CPU，其中断处理的灵活性更好，但是可能导致系统更加复杂。</li>\n</ul>\n</li>\n<li>思考题 3：为何与外设通信需要 Bridge？\n<ul>\n<li>外设数量和种类众多，如果直接用 CPU 和各个外设相连，那么系统的可读性和清晰性得不到保证，也不易于进行扩展。将外部通信功能提取出来统一交给桥芯片实现，符合了高内聚低耦合的原则，使得 CPU 可以将所有外设都当成内存空间进行处理，统一性好。</li>\n<li>外设的通信方式各不相同，并且地址空间可能重合，桥芯片承担了转换交互信号和地址信息的功能。在实际实现中，还分为北桥芯片和南桥芯片。前者负责 CPU 和主存 / 显卡的连接，后者负责前者与各种 I/O 设备的连接。</li>\n</ul>\n</li>\n<li>思考题 4：请阅读官方提供的定时器源代码，阐述两种中断模式的异同，并针对每一种模式绘制状态移图。\n<ul>\n<li>相同之处是都使用了初值寄存器、计数器、控制寄存器，其中中断屏蔽行为相同，也都是在 count 为 0 时产生中断信号。</li>\n<li>不同之处是模式 0 在完成计数时 Enable 置 0，不再计数，持续产生中断信号，直到 Enable 被外部修改为 1；而模式 1 完成计数后产生一个周期中断就再进行一轮计数，用于产生周期性中断。</li>\n<li>以 preset 为 3 为例，状态转移图如下：<br />\n<img data-src=\"images/64bf838fa20b6f33343a41eb8dfcc116de7677a0d8160c1105bb93cdf65b2f37.png\" alt=\"图 1\" /></li>\n</ul>\n</li>\n<li>思考题 5：倘若中断信号流入的时候，在检测宏观 PC 的一级如果是一条空泡（你的 CPU 该级所有信息均为空）指令，此时会发生什么问题？在此例基础上请思考：在 P7 中，清空流水线产生的空泡指令应该保留原指令的哪些信息？\n<ul>\n<li>如果是一条空泡，则会将 0x00000000 当作宏观 PC 写入 EPC 当中，这会导致中断处理完成以后回不到当前位置上。</li>\n<li>PC 和 BD 两个信号在插入空泡时应该保留被暂停指令的值。保留 PC 的原因如上所述，而保留 BD 则是因为当空泡遇到中断时，如 BD 不保留，则无法判断当前被暂停（将要执行）的指令是否是延迟槽指令。如果是延迟槽指令且 BD 被置零，那么前一条跳转指令就失效了。</li>\n</ul>\n</li>\n<li>思考题 6：为什么 jalr 指令为什么不能写成 jalr $31, $31？\n<ul>\n<li>jalr 指令读取 rs 寄存器，写到 rd 寄存器。当 jalr 指令的延迟槽遇到中断时，jalr 执行完毕，再进行中断处理程序，此时 31 号寄存器已经被 jalr 修改，等到处理结束回到 jalr 重新执行时，jalr 读到的 $31 是已经被自己修改的，会导致执行错误。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "计算机组成",
                "mips",
                "五级流水线CPU",
                "Verilog HDL",
                "异常和中断"
            ]
        },
        {
            "id": "http://example.com/2024/04/13/CO_P6_document/",
            "url": "http://example.com/2024/04/13/CO_P6_document/",
            "title": "CO_P6_document",
            "date_published": "2024-04-13T15:36:13.000Z",
            "content_html": "<h1 id=\"cpu设计文档及思考题\"><a class=\"anchor\" href=\"#cpu设计文档及思考题\">#</a> CPU 设计文档及思考题</h1>\n<h3 id=\"设计草稿\"><a class=\"anchor\" href=\"#设计草稿\">#</a> 设计草稿</h3>\n<h4 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h4>\n<ul>\n<li>在 P5 草稿基础上进行修订，加入了乘除模块和存储器外置，先画出流水线 CPU 的设计示意图如下。其中正三角表示转发的供给者，倒三角表示转发的需求者。部分控制信号连线省略了。<br />\n<img data-src=\"images/6292977b93723d75aba6e9e95135ccdc8d79fe355688e75db69039943b613f99.png\" alt=\"图 2\" /></li>\n</ul>\n<h4 id=\"工程化设计\"><a class=\"anchor\" href=\"#工程化设计\">#</a> 工程化设计</h4>\n<ul>\n<li>先对需要实现的指令进行分类，对每个类别设计数据通路。分成以下几类：Cal,immCal,irCal,Load,Store,Branch,jWrite,jUse,mdCal,mdSet,mdGet, 大多数沿用之前的通路。<br />\n数据通路的设计如下，其中标记橙色部分为转发的需求者，需要替换为转发需求者多路选择器的输出：<br />\n<img data-src=\"images/7027256ffc8615969f33f4c77e573bfe195642d723004b2a04d16ce735f2a639.png\" alt=\"图 1\" /></li>\n<li>控制信号的设计基本延续了之前的指令，添加了少量信号。</li>\n<li>暂停转发的设计如下 (延续 P5)：\n<ul>\n<li>暂停 / 转发的策略信号：rs-Tuse,rt-Tuse 是从存到 D 级开始，过多少周期用到。Tnew 是从存入当前寄存器开始，过多少周期更新数据。</li>\n<li>暂停信号例如 (rs-Tuse &lt; Tnew_E &amp;&amp; rs == A3@E &amp;&amp; RegWrite@E &amp;&amp; rs != 0)。其他同理，将两个子公式析取起来得到 rs_Stall，将 rs_Stall 和 rt_Stall 析取得到 Stall。</li>\n<li>转发信号的条件则是信号已经产生并且读写同一个寄存器、寄存器不为零号、写使能。由于采用集中式译码，因此 “信号已经产生” 的条件不是查看后面流水级寄存器得到的 T_new 为零，而是等到将要转发的那个周期中 T_new 为零。即 T_new_2D 为零，T_new_2E 小于等于一，T_new_2M 小于等于 2。</li>\n<li><strong>添加 Stall_md 信号，当乘除模块 start 或 busy 时 D 级为乘除指令时暂停</strong></li>\n<li><strong>添加 E 级的转发选择信号，如果是 mfhi/mflo 指令应该转发 MDR.Out</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"模块设计\"><a class=\"anchor\" href=\"#模块设计\">#</a> 模块设计</h4>\n<ul>\n<li>\n<p>PC</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Clk</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">时钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reset</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">同步复位到 0x00003000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">In</td>\n<td style=\"text-align:center\">Input[31:0]</td>\n<td style=\"text-align:center\">npc</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Out</td>\n<td style=\"text-align:center\">Output[31:0]</td>\n<td style=\"text-align:center\">pc</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>IM</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">指令的字节地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Out[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">指令</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>GRF</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Clk</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">时钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reset</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">同步复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WE</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A1[4:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 1 地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A2[4:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 2 地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A3[4:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 3 地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WD[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">写入数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D1[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">读出数据 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D2[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">读出数据 2</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>NPC</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">BLOCK_NPC</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">冻结信号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NPCMode[2:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">运算模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PC_Out[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">F 级 PC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PC_D[31;0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">D 级 PC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Imm</td>\n<td style=\"text-align:center\">Input[25:0]</td>\n<td style=\"text-align:center\">25 位立即数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ra</td>\n<td style=\"text-align:center\">Input[31:0]</td>\n<td style=\"text-align:center\">ra</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">beq</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">beq 两数是否相等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pc8</td>\n<td style=\"text-align:center\">Output[31:0]</td>\n<td style=\"text-align:center\">PC_D+8(PC_Out+4)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">npc</td>\n<td style=\"text-align:center\">Output[31:0]</td>\n<td style=\"text-align:center\">NPC</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>EXT</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">EXTMode[1:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Imm16</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">待扩展立即数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ext[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">结果</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>Controller</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Opcode[5:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Funct[5:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rs[4:0]</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rt[4:0]</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">T_new_E[2:0]</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">T_new_D[2:0]</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">T_new_M[2:0]</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RegWrite_E</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RegWrite_D</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RegWrite_M</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NPCMode</td>\n<td style=\"text-align:center\">Output[2:0]</td>\n<td style=\"text-align:center\">NPC 模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">EXTMode</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">EXT 使能和模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A3Src[1:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">ALU/DM 回写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ALUSrc[1:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">B 为寄存器 / 立即数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ALUMode[3:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">ALU 模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MemoryWrite</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">DM 写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WDSrc[1:0]</td>\n<td style=\"text-align:center\">Ouput</td>\n<td style=\"text-align:center\">DM 选择</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RegWrite</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">GRF 写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Stall</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">暂停</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DFV1_DSrc[2:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">转发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DFV2_DSrc[2:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">转发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DFV1_ESrc[1:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">转发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DFV2_ESrc[1:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">转发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DFData_MSrc[1:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">转发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">T_new_D[2:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">产生结果时间</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>ALU</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">B[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ALUMode[3:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">运算结果</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>D</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CLK</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">时钟信号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reset</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">同步复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BLOCK_D</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">冻结信号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PC[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">pc</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IR[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">指令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PC_D</td>\n<td style=\"text-align:center\" colspan=\"2\">Output</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IR_()_D</td>\n<td style=\"text-align:center\">Ouput</td>\n<td style=\"text-align:center\">指令的各个域</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h3 id=\"测试方案\"><a class=\"anchor\" href=\"#测试方案\">#</a> 测试方案</h3>\n<ul>\n<li>进行一定的手动测试。其中可以先进行单条指令的测试。这里使用了部分 P5 的测试点，并构造了一些其他点测试新指令，如：</li>\n</ul>\n<pre><code>.data\n\n.text\n  ori $1,$0,12\n  sw $1,0($0)\n  ori $2,$0,15\n  sb $2,1($0)\n  ori $3,$0,1376\n  sh $3,2($0)\n  ori $4,$0,0xffff\n  sh $4,4($0)\n  lui $5,0xffff\n  sb $5,7($0)\n  slt $10,$5,$4\n  sh $10,6($0)\n  slt $11,$1,$2\n  sb $11,8($0)\n  slt $10,$3,$1\n  slt $11,$1,$4\n  sltu $10,$5,$4\n  sltu $11,$1,$2\n  sltu $10,$3,$1\n  sltu $11,$1,$4\n  and $1,$2,$1\n  sb $1,10($0)\n  and $2,$3,$3\n  sh $2,14($0)\n  and $5,$5,$3\n  lw $4,0($0)\n  and $4,$5,$4\n  lh $3,0($0)\n  or $1,$2,$1\n  lb $3,3($0)\n  or $2,$3,$3\n  lh $5,4($0)\n  or $5,$5,$3\n  lb $4,5($0)\n  or $4,$5,$4\n</code></pre>\n<ul>\n<li>多条指令之间的暂停转发的测试。为了进行充分覆盖，将指令分成不同的类型，类型内和类型之间进行测试。包括前一条指令与后一条指令数据相关，隔一条指令数据相关，隔两条指令数据相关。测试样例如下 (算数指令和立即数指令内和之间)：</li>\n</ul>\n<pre><code>.data\n\n.text\n  ori $1,$0,12\n  addi $2,$0,15\n  ori $3,$0,16\n  addi $4,$0,17\n  add $1,$2,$3\n  sub $2,$3,$1\n  add $1,$2,$3\n  sub $3,$1,$2\n  add $1,$2,$3\n  nop\n  or $3,$1,$2\n  add $1,$2,$3\n  nop\n  sub $3,$2,$1\n  and $1,$2,$3\n  nop\n  nop\n  slt $3,$1,$2\n  add $1,$2,$3\n  nop\n  nop\n  sltu $3,$2,$1\n  add $1,$2,$3\n  andi $3,$1,15\n  add $1,$2,$3\n  nop\n  ori $3,$1,13\n  add $1,$2,$3\n  nop\n  nop\n  ori $3,$1,15\n  and $1,$2,$3\n  ori $3,$1,15\n  or $1,$3,$2\n  ori $3,$1,15\n  nop\n  add $1,$3,$2\n  ori $3,$1,15\n  nop\n  add $1,$2,$3\n  ori $3,$1,15\n  nop\n  nop\n  or $1,$3,$2\n  ori $3,$1,15\n  nop\n  nop\n  or $1,$2,$3\n  lui $1,0xff\n  add $1,$2,$1\n  lui $1,0xff\n  add $1,$1,$1\n  lui $1,0xff\n  nop\n  add $1,$2,$1\n  lui $1,0x1\n  nop\n  add $2,$1,$2\n  lui $1,0x11\n  nop\n  nop\n  add $2,$1,$2\n  lui $1,0x1\n  nop\n  nop\n  add $2,$2,$1\n</code></pre>\n<h3 id=\"思考题\"><a class=\"anchor\" href=\"#思考题\">#</a> 思考题</h3>\n<ul>\n<li>思考题 1：\n<ul>\n<li>乘除法需要<strong>较长的计算时间，独立出来进行计算，与不用到乘除模块的指令并行进行能够显著提高效率</strong>；并且部件用到了大量的加法器，规模较大，无法简单复用 ALU 模块。</li>\n<li>为了保证乘除模块的独立性，不至于和其他的指令产生数据相关和冒险，设置专用寄存器 hi/lo。</li>\n</ul>\n</li>\n<li>思考题 2：\n<ul>\n<li>流水线乘法器（除法器）可以采用横向进位的方式，然后<strong>在每一级（若干位）插入一个流水线寄存器，将整个组合电路分成 N 个流水级</strong>，N 个周期算出结果。</li>\n</ul>\n</li>\n<li>思考题 3：\n<ul>\n<li>将 busy 和 start 信号传入 D 级中，如果 start || busy 且 D 级的指令使用到了乘除模块，则 D 级指令暂停，否则继续执行。</li>\n</ul>\n</li>\n<li>思考题 4:\n<ul>\n<li>按字节使能的方式来处理数据，要存入哪几个字节一目了然，相比于使用其它控制信号，代码易读且易修改，将来有其它的写入方式也容易添加。</li>\n<li>通过字节使能信号的标记，能清晰地看出要将待写入的有效字节放在哪几位上，和 Mem 中写入的位统一。</li>\n</ul>\n</li>\n<li>思考题 5：\n<ul>\n<li>实际读写时写入和读出的数据都是一个字而不是一个字节。</li>\n<li>如果数据是按照字节存储的，例如 char，那么按照字节读取的效率高于按字读取的效率。</li>\n</ul>\n</li>\n<li>思考题 6：\n<ul>\n<li>延续和扩展了之前使用的一些规范手段，例如采用宏定义标记多路选择器的选择信号；合理命名指令译码信号、控制信号和选择器等等。</li>\n<li>采用了一些抽象手段，例如给指令进行分类，将若干个信号析取合成一个指令类信号，例如<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mi>a</mi><mi>l</mi><mo>=</mo><mi>a</mi><mi>d</mi><mi>d</mi><mi mathvariant=\"normal\">∣</mi><mi>s</mi><mi>u</mi><mi>b</mi><mi mathvariant=\"normal\">∣</mi><mi>a</mi><mi>n</mi><mi>d</mi><mi mathvariant=\"normal\">∣</mi><mi>o</mi><mi>r</mi><mo separator=\"true\">;</mo></mrow><annotation encoding=\"application/x-tex\">Cal = add | sub | and | or;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">d</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">d</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">;</span></span></span></span> 等。释放相应控制信号尽可能采用抽象类信号。</li>\n<li>如上所述，在译码过程中采用的是控制信号驱动的译码。<strong>在记录相应指令信号时采用指令类的信号使得代码量减小且易读。</strong></li>\n<li>处理数据冲突时先记录 T_use_rs 和 T_use_rt T_new，再根据大小关系判断暂停和转发信号，在此次设计中同样<strong>将 T_use_rs 和 T_use_rt T_new 信号的记录换成指令类</strong>，其他信号几乎无修改即可实现冲突处理。</li>\n</ul>\n</li>\n<li>思考题 7：\n<ul>\n<li>在本分类当中，产生冲突的组合有</li>\n</ul>\n<pre><code>    Cal            Cal\n    immCal         irCal\n    irCal          Load\n    Load     +     Store\n    jWrite         Branch\n    mdGet          jUse\n                   mdCal\n</code></pre>\n以及<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>d</mi><mi>C</mi><mi>a</mi><mi>l</mi><mo>+</mo><mi>m</mi><mi>d</mi><mi>C</mi><mi>a</mi><mi>l</mi><mi mathvariant=\"normal\">/</mi><mi>m</mi><mi>d</mi><mi>G</mi><mi>e</mi><mi>t</mi><mi mathvariant=\"normal\">/</mi><mi>m</mi><mi>d</mi><mi>S</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">mdCal + mdCal/mdGet/mdSet</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">G</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span></span></span></span>\n<ul>\n<li>解决方案为记录相应的 T-use-rs 和 T-use-rt T-new，通过比较判断暂停和转发情况。<strong>特别的，乘除模块的冲突使用 busy/start 信号判断是否需要暂停，始终无需转发</strong></li>\n<li>对每个类型构造相邻 / 相隔一条指令 / 相隔两条指令来测试暂停和转发的正确性，样例同测试方案样例 (展示了 Cal 内部测试)：</li>\n</ul>\n</li>\n</ul>\n<pre><code>.data\n\n.text\n  ori $1,$0,12\n  addi $2,$0,15\n  ori $3,$0,16\n  addi $4,$0,17\n  add $1,$2,$3\n  sub $2,$3,$1\n  add $1,$2,$3\n  sub $3,$1,$2\n  add $1,$2,$3\n  nop\n  or $3,$1,$2\n  add $1,$2,$3\n  nop\n  sub $3,$2,$1\n  and $1,$2,$3\n  nop\n  nop\n  slt $3,$1,$2\n  add $1,$2,$3\n  nop\n  nop\n  sltu $3,$2,$1\n  add $1,$2,$3\n  andi $3,$1,15\n  add $1,$2,$3\n  nop\n  ori $3,$1,13\n  add $1,$2,$3\n  nop\n  nop\n  ori $3,$1,15\n  and $1,$2,$3\n  ori $3,$1,15\n  or $1,$3,$2\n  ori $3,$1,15\n  nop\n  add $1,$3,$2\n  ori $3,$1,15\n  nop\n  add $1,$2,$3\n  ori $3,$1,15\n  nop\n  nop\n  or $1,$3,$2\n  ori $3,$1,15\n  nop\n  nop\n  or $1,$2,$3\n  lui $1,0xff\n  add $1,$2,$1\n  lui $1,0xff\n  add $1,$1,$1\n  lui $1,0xff\n  nop\n  add $1,$2,$1\n  lui $1,0x1\n  nop\n  add $2,$1,$2\n  lui $1,0x11\n  nop\n  nop\n  add $2,$1,$2\n  lui $1,0x1\n  nop\n  nop\n  add $2,$2,$1\n</code></pre>\n<ul>\n<li>思考题 8：\n<ul>\n<li>对于单条指令的测试，与 P3/P4 基本相同，即构造不同类别、不同大小、边界条件的数据，以保证测试的覆盖性。</li>\n<li>对于冲突和冒险的测试，根据上面思考题 7 提到的方案进行构造。对于寄存器冲突的测试，只需要测试相邻 / 相隔一个周期 / 相隔两个周期即可，因为相隔三个周期及以上已存入通用寄存器下一个周期才读取并存入流水线寄存器，不会产生数据冒险。对于乘除模块，则需要测试相隔高达 5/10 个周期。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "计算机组成",
                "mips",
                "五级流水线CPU",
                "Verilog HDL"
            ]
        },
        {
            "id": "http://example.com/2024/04/13/CO_P5_document/",
            "url": "http://example.com/2024/04/13/CO_P5_document/",
            "title": "CO_P5_document",
            "date_published": "2024-04-13T15:36:12.000Z",
            "content_html": "<h1 id=\"cpu设计文档及思考题\"><a class=\"anchor\" href=\"#cpu设计文档及思考题\">#</a> CPU 设计文档及思考题</h1>\n<h3 id=\"设计草稿\"><a class=\"anchor\" href=\"#设计草稿\">#</a> 设计草稿</h3>\n<h4 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h4>\n<ul>\n<li>在单周期 CPU 的基础上，加入流水线寄存器以分割 CPU 的 5 个执行阶段。为了处理冒险，需要加入暂停和转发的模块。为了使得思路更加清晰，先画出流水线 CPU 的设计示意图如下。其中正三角表示转发的供给者，倒三角表示转发的需求者。部分控制信号连线省略了。<br />\n<img data-src=\"images/28bf9b977c14dacd968f75dcc97f35ba8fd0e0317b2828032c42f7389de474da.png\" alt=\"图 0\" /></li>\n</ul>\n<h4 id=\"工程化设计\"><a class=\"anchor\" href=\"#工程化设计\">#</a> 工程化设计</h4>\n<ul>\n<li>数据通路的设计如下，其中标记橙色部分为转发的需求者，需要替换为转发需求者多路选择器的输出：<br />\n<img data-src=\"images/99439b57b3bce70c446879f3debd75a627f33a71dbd14ce8cdc4eef1bf23790a.png\" alt=\"图 1\" /></li>\n<li>控制信号的设计如下：<br />\n<img data-src=\"images/608d10bbdd5b4efcdfe8b68fe031b0e75053696d4870a4c6d24f71e42acc6f2a.png\" alt=\"图 2\" /></li>\n<li>暂停转发的设计如下：\n<ul>\n<li>暂停 / 转发的策略信号：rs-Tuse,rt-Tuse 是从存到 D 级开始，过多少周期用到。Tnew 是从存入当前寄存器开始，过多少周期更新数据。</li>\n<li>暂停信号例如 (rs-Tuse &lt; Tnew_E &amp;&amp; rs == A3@E &amp;&amp; RegWrite@E &amp;&amp; rs != 0)。其他同理，将两个子公式析取起来得到 rs_Stall，将 rs_Stall 和 rt_Stall 析取得到 Stall。</li>\n<li>转发信号的条件则是信号已经产生并且读写同一个寄存器、寄存器不为零号、写使能。由于采用集中式译码，因此 “信号已经产生” 的条件不是查看后面流水级寄存器得到的 T_new 为零，而是等到将要转发的那个周期中 T_new 为零。即 T_new_2D 为零，T_new_2E 小于等于一，T_new_2M 小于等于 2。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"模块设计\"><a class=\"anchor\" href=\"#模块设计\">#</a> 模块设计</h4>\n<ul>\n<li>\n<p>PC</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Clk</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">时钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reset</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">同步复位到 0x00003000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">In</td>\n<td style=\"text-align:center\">Input[31:0]</td>\n<td style=\"text-align:center\">npc</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Out</td>\n<td style=\"text-align:center\">Output[31:0]</td>\n<td style=\"text-align:center\">pc</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>IM</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">指令的字节地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Out[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">指令</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>GRF</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Clk</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">时钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reset</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">同步复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WE</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A1[4:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 1 地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A2[4:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 2 地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A3[4:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 3 地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WD[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">写入数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D1[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">读出数据 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D2[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">读出数据 2</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>NPC</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">BLOCK_NPC</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">冻结信号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NPCMode[2:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">运算模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PC_Out[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">F 级 PC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PC_D[31;0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">D 级 PC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Imm</td>\n<td style=\"text-align:center\">Input[25:0]</td>\n<td style=\"text-align:center\">25 位立即数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ra</td>\n<td style=\"text-align:center\">Input[31:0]</td>\n<td style=\"text-align:center\">ra</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">beq</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">beq 两数是否相等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pc8</td>\n<td style=\"text-align:center\">Output[31:0]</td>\n<td style=\"text-align:center\">PC_D+8(PC_Out+4)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">npc</td>\n<td style=\"text-align:center\">Output[31:0]</td>\n<td style=\"text-align:center\">NPC</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>EXT</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">EXTMode[1:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Imm16</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">待扩展立即数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ext[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">结果</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>Controller</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Opcode[5:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Funct[5:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rs[4:0]</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rt[4:0]</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">T_new_E[2:0]</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">T_new_D[2:0]</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">T_new_M[2:0]</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RegWrite_E</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RegWrite_D</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RegWrite_M</td>\n<td style=\"text-align:center\" colspan=\"2\">Input</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NPCMode</td>\n<td style=\"text-align:center\">Output[2:0]</td>\n<td style=\"text-align:center\">NPC 模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">EXTMode</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">EXT 使能和模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A3Src[1:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">ALU/DM 回写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ALUSrc[1:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">B 为寄存器 / 立即数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ALUMode[3:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">ALU 模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MemoryWrite</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">DM 写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WDSrc[1:0]</td>\n<td style=\"text-align:center\">Ouput</td>\n<td style=\"text-align:center\">DM 选择</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RegWrite</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">GRF 写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Stall</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">暂停</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DFV1_DSrc[2:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">转发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DFV2_DSrc[2:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">转发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DFV1_ESrc[1:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">转发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DFV2_ESrc[1:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">转发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DFData_MSrc[1:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">转发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">T_new_D[2:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">产生结果时间</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>ALU</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">B[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ALUMode[3:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">运算结果</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>DM</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Clk</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">时钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reset</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">同步复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">En</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">读地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WD[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">写数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RD[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">读出数据</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>D</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CLK</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">时钟信号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reset</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">同步复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BLOCK_D</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">冻结信号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PC[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">pc</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IR[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">指令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PC_D</td>\n<td style=\"text-align:center\" colspan=\"2\">Output</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IR_()_D</td>\n<td style=\"text-align:center\">Ouput</td>\n<td style=\"text-align:center\">指令的各个域</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>E<br />\n<img data-src=\"images/625d00dca62ad95379426a55da3387f2f4e534f1821a9a46b5c28ea4cbcce0de.png\" alt=\"图 4\" /><br />\n<img data-src=\"images/938537a1f935ac242627015e77c733ce509195603354664c31f8c3d6c8f4ba4a.png\" alt=\"图 5\" /></p>\n</li>\n<li>\n<p>M<br />\n<img data-src=\"images/f765352219919b11eb3d00f18be6c67bda79a86c95288504d37ad6d8f1da96ef.png\" alt=\"图 6\" /><br />\n<img data-src=\"images/7f81613d9762967ba1403084aadfbf47d0db12d68d737cb4128d1812bf5b0031.png\" alt=\"图 7\" /></p>\n</li>\n<li>\n<p>W<br />\n<img data-src=\"images/c775f2502faa5fdf8856ade483ee0f89031fedf871c29d5faafbd2922c627ea4.png\" alt=\"图 8\" /></p>\n</li>\n</ul>\n<h3 id=\"测试方案\"><a class=\"anchor\" href=\"#测试方案\">#</a> 测试方案</h3>\n<ul>\n<li>进行一定的手动测试。其中可以先进行单条指令的测试。这里使用了部分 P3,P4 的测试点。</li>\n<li>多条指令之间的暂停转发的测试。为了进行充分覆盖，将指令分成不同的类型，类型内和类型之间进行测试。包括前一条指令与后一条指令数据相关，隔一条指令数据相关，隔两条指令数据相关。测试样例如下 (算数指令和立即数指令内和之间)：</li>\n</ul>\n<pre><code>.data\n\n.text\n  ori $1,$0,12\n  ori $2,$0,15\n  ori $3,$0,16\n  ori $4,$0,17\n  add $1,$2,$3\n  sub $2,$3,$1\n  add $1,$2,$3\n  sub $3,$1,$2\n  add $1,$2,$3\n  nop\n  sub $3,$1,$2\n  add $1,$2,$3\n  nop\n  sub $3,$2,$1\n  add $1,$2,$3\n  nop\n  nop\n  sub $3,$1,$2\n  add $1,$2,$3\n  nop\n  nop\n  sub $3,$2,$1\n  add $1,$2,$3\n  ori $3,$1,15\n  add $1,$2,$3\n  nop\n  ori $3,$1,13\n  add $1,$2,$3\n  nop\n  nop\n  ori $3,$1,15\n  add $1,$2,$3\n  ori $3,$1,15\n  add $1,$3,$2\n  ori $3,$1,15\n  nop\n  add $1,$3,$2\n  ori $3,$1,15\n  nop\n  add $1,$2,$3\n  ori $3,$1,15\n  nop\n  nop\n  add $1,$3,$2\n  ori $3,$1,15\n  nop\n  nop\n  add $1,$2,$3\n  lui $1,0xff\n  add $1,$2,$1\n  lui $1,0xff\n  add $1,$1,$1\n  lui $1,0xff\n  nop\n  add $1,$2,$1\n  lui $1,0x1\n  nop\n  add $2,$1,$2\n  lui $1,0x11\n  nop\n  nop\n  add $2,$1,$2\n  lui $1,0x1\n  nop\n  nop\n  add $2,$2,$1\n</code></pre>\n<h3 id=\"思考题\"><a class=\"anchor\" href=\"#思考题\">#</a> 思考题</h3>\n<ul>\n<li>思考题 1：当分支指令于先前的指令不会产生相关时，能够提高效率，但是如果产生数据相关，很有可能分支指令要被迫暂停等待数据更新。例如：</li>\n</ul>\n<pre><code>lw  $1,0($0)\nlw  $2,0($3)\nbeq $1,$2,label\n</code></pre>\n<p>beq 指令要等待两个周期，直到 lw 将要更新的 $2 写入 W 级，才能执行；这和没有提前分支判断（需要等待一个周期）执行完所需要的时钟周期数量是相同的，且不提前判断还可以让延迟槽的指令进入 D 级开始译码。</p>\n<ul>\n<li>\n<p>思考题 2：jal 指令的效果是在 jal 之后所执行的 jr（$ra 未被修改）能够跳转回接下来要执行的指令。由于延迟槽中的指令（即 jal 的 pc+4）已经在跳转前紧随 jr 执行完成，无需也不应该再执行一次，返回时应执行延迟槽的下一条指令，故应该保存 pc+8。</p>\n</li>\n<li>\n<p>思考题 3：如果直接从功能部件进行转发，那么意味着接收者会先计算错误的信号，再计算正确信号。从本周期时钟上升沿开始，接收者接收到正确的输入信号并产生本级结果所经历的组合逻辑延时是提供级和接受级组合逻辑延时之和，这导致如果想要获得稳定正确的输出，则时钟周期被迫延长，这违反了流水线设计的初衷。因此应该在下一周期结果存到流水线寄存器当中再转发。</p>\n</li>\n<li>\n<p>思考题 4：</p>\n<ul>\n<li>这是因为由于流水线执行的特点，存在 GRF 同时被读和被写的冒险的情况，即在某上升沿到来之前，之前在 W 级的指令已经准备好数据和控制信号，而此时在 D 级的信号读出更新前数据，将要存到 E 级流水线寄存器当中。此时 D 级读出的信号并不是我们真正想要的。又因为新信号已经产生并传到 GRF，我们可以通过 GRF 的内部转发把 D 级读出的信号换成新的信号，以解决冒险。</li>\n<li>实现方法：在 GRF 读出数据之前判断是否与将要写入的数据地址相同且不为零，若条件成立，则输出将要写入的值，否则输出寄存器中的值。即：<pre><code>assign RD1 = ((A1 == A3) &amp;&amp; (A1 != 0) &amp;&amp; WE) ? WD : register[A1];\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>思考题 5：</p>\n<ul>\n<li>需求者有 D 级的 GRF.RD1,GRF.RD2，E 级的 V1,V2 以及 M 级的 Data；而供给者有 E 级的 PC8，M 级别的 PC8 和 AO，以及 W 级的要写入的数据 WD。</li>\n<li>假设各个接受方的多路选择器分别是 MFV1_D,MFV2_D,MFV1_E,MFV2_E,MFData_M, 分别对应输出相应的更新数据，而供给方只需要在 M 级有一多路选择器 MFBack_M, 其数据来自 ALUO_M 和 PC8_M。</li>\n<li>转发数据流包括\n<ul>\n<li>PC8_E-&gt;MFV1_D,</li>\n<li>PC8_E-&gt;MFV2_D,</li>\n<li>MFBack_M-&gt;MFV1_D,</li>\n<li>MFBack_M-&gt;MFV2_D,</li>\n<li>MFBack_M-&gt;MFV1_E,</li>\n<li>MFBack_M-&gt;MFV2_E,</li>\n<li>WD_W-&gt;MFV1_D,</li>\n<li>WD_W-&gt;MFV2_D,</li>\n<li>WD_W-&gt;MFV1_E,</li>\n<li>WD_W-&gt;MFV2_E,</li>\n<li>WD_W-&gt;MFData_M,</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>思考题 6：</p>\n<ul>\n<li>指令的分类：目前可以分成如下几类：\n<ul>\n<li>寄存器算术逻辑运算类型。此类型的运算读两个寄存器，写一个寄存器，使用 ALU 算出结果，不用 Memory。因此 T_use_rs=T_use_rt=1,T_new_D=2。</li>\n<li>寄存器 - 立即数算术逻辑运算类型。此类型的运算读一个个寄存器，用一个立即数，写一个寄存器，使用 ALU 算出结果，不用 Memory。因此 T_use_rs=1,T_new_D=2。</li>\n<li>立即数算术逻辑运算类型。只用立即数算出结果，不用寄存器，T_new=2。</li>\n<li>load 类型。访存。用寄存器，立即数算出地址访问 Mem，修改 rt。T_use_rs=1，T_new_D=3。</li>\n<li>store 类型。T_use_rs=1，不修改寄存器。</li>\n<li>branch 类型。T_use_rs=T_use_rt=0，不修改寄存器。</li>\n<li>立即数 j 类型。不使用寄存器，jal 修改寄存器且 T_new_D=1。</li>\n<li>寄存器 j 类型。T_use_rs=0。</li>\n</ul>\n</li>\n<li>可以看出，在数据通路方面，存在使用寄存器和使用立即数的差别，以及是否经过 ALU 计算的差别，对相应的通路和算术类型，修改控制信号 ALUMode 和 ALUBSrc。</li>\n<li>在暂停转发的控制上，可以将每个指令分成两方面，即读寄存器方面和写寄存器方面。\n<ul>\n<li>如果不读寄存器，则无暂停转发，在本人设计中即不需要改动 T_use_rs=T_use_rt，设置为默认值。如果需要读寄存器，那么需要把 T_use_rs，T_use_rt 设置到对应值上。这里还需要注意，<strong>可能存在指令使用的寄存器并不是 rs 和 rt 域对应的寄存器，这时候需要修改 D 级的数据通路，通过添加多路选择器将其整合到 rs/rt 中，或者新增加一个流水信号持续下传；同时设置好相应的 T_use_（）值以及 MuxSrc</strong>。</li>\n<li>写寄存器方面。如果不写，对转发暂停无影响，RegWrite 和 T_new 保持默认值即可。如果写，RegWrite 和 T_new 设置到相应值。<strong>同样的，如果写的寄存器不是 rd/rt/0x1f，那么要增加 A3Src 的来源和 A3Src 控制信号。这里特别需要注意的是，A3 不一定在 D 级就已经知道，在这种情况下，需要在后面的流水级多加 MUX 和 MUXSrc 信号，并且如果之后有读寄存器信号，如果 max {T_new_A3,T_new_Data}&gt;T_use, 那么需要暂停。其余需要转发</strong>。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>思考题 7：</p>\n<ul>\n<li>本译码器为集中译码，在 D 级输入 Opcode 和 Funct，译码出指令类型，并以此译码形成模式控制信号，是能控制信号和多路选择器信号（记录每个信号取值对应的指令类型）。同时也输入了 EMW 级的寄存器写使能和 A3 信号，直接在 D 级判断了暂停和转发情况，产生暂停信号或转发选择信号。</li>\n<li>优点是逻辑比较简单，写的代码行数较少；且集中在一个模块内，便于排查错误。不足之处则是需要传递大量的控制信号，流水线寄存器的规模比较大，端口众多且连线复杂，设计时比较麻烦，且不便于添加新的控制信号。</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "计算机组成",
                "mips",
                "五级流水线CPU",
                "Verilog HDL"
            ]
        },
        {
            "id": "http://example.com/2024/04/13/CO_P4_document/",
            "url": "http://example.com/2024/04/13/CO_P4_document/",
            "title": "CO_P4_document",
            "date_published": "2024-04-13T15:36:11.000Z",
            "content_html": "<h1 id=\"cpu设计文档及思考题\"><a class=\"anchor\" href=\"#cpu设计文档及思考题\">#</a> CPU 设计文档及思考题</h1>\n<h2 id=\"设计草稿\"><a class=\"anchor\" href=\"#设计草稿\">#</a> 设计草稿</h2>\n<h4 id=\"顶层模块设计\"><a class=\"anchor\" href=\"#顶层模块设计\">#</a> 顶层模块设计</h4>\n<ul>\n<li>在 P3 的基础上，将其顶层结构翻译映射为 Verilog HDL 的工程文件。</li>\n<li>因此，对 P3 文档稍加修订，得到顶层模块的工程设计如下\n<ul>\n<li>数据通路<br />\n<img data-src=\"images/20d20ea83ec1ffd6106748bbebc5fc3683832d851e1f8f1052bb90d97a663cbe.png\" alt=\"图 2\" /></li>\n<li>控制\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">指令</th>\n<th style=\"text-align:center\">NPCMode[1:0]</th>\n<th style=\"text-align:center\">RegWrite</th>\n<th style=\"text-align:center\">ALUOp[3:0]</th>\n<th style=\"text-align:center\">MemoryWrite</th>\n<th style=\"text-align:center\">ExtOp[1:0]</th>\n<th style=\"text-align:center\">ALUSrc[1:0]</th>\n<th style=\"text-align:center\">GRFSrc[1:0]</th>\n<th style=\"text-align:center\">GRFA3Src[1:0]</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">add</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0000</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">xx</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">00</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sub</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0001</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">xx</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">00</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ori</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0010</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">01</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">01</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lw</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0000</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">01</td>\n<td style=\"text-align:center\">01</td>\n<td style=\"text-align:center\">01</td>\n<td style=\"text-align:center\">01</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">sw</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0000</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">01</td>\n<td style=\"text-align:center\">01</td>\n<td style=\"text-align:center\">xx</td>\n<td style=\"text-align:center\">xx</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">beq</td>\n<td style=\"text-align:center\">01</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0001</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">xx</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">xx</td>\n<td style=\"text-align:center\">xx</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lui</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0011</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">xx</td>\n<td style=\"text-align:center\">01</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">01</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jal</td>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">xxxx</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">xx</td>\n<td style=\"text-align:center\">xx</td>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:center\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">jr</td>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">xxxx</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">xx</td>\n<td style=\"text-align:center\">xx</td>\n<td style=\"text-align:center\">xx</td>\n<td style=\"text-align:center\">xx</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nop</td>\n<td style=\"text-align:center\">00</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">xxxx</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">xx</td>\n<td style=\"text-align:center\">xx</td>\n<td style=\"text-align:center\">xx</td>\n<td style=\"text-align:center\">xx</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"子模块\"><a class=\"anchor\" href=\"#子模块\">#</a> 子模块</h4>\n<ul>\n<li>\n<p>程序计数器 PC</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Clk</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">时钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reset</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">同步复位到 0x00003000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">In</td>\n<td style=\"text-align:center\">Input[31:0]</td>\n<td style=\"text-align:center\">npc</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Out</td>\n<td style=\"text-align:center\">Output[31:0]</td>\n<td style=\"text-align:center\">pc</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>下一指令运算器 NPC</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Mode</td>\n<td style=\"text-align:center\">Input[2:0]</td>\n<td style=\"text-align:center\">运算模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Zero</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">ALU 结果是否为零</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pc</td>\n<td style=\"text-align:center\">Input[31:0]</td>\n<td style=\"text-align:center\">PC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Imm</td>\n<td style=\"text-align:center\">Input[25:0]</td>\n<td style=\"text-align:center\">25 位立即数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ra</td>\n<td style=\"text-align:center\">Input[31:0]</td>\n<td style=\"text-align:center\">ra</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pc4</td>\n<td style=\"text-align:center\">Output[31:0]</td>\n<td style=\"text-align:center\">PC+4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">npc</td>\n<td style=\"text-align:center\">Output[31:0]</td>\n<td style=\"text-align:center\">NPC</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>指令存储器 IM</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">Input[13:2]</td>\n<td style=\"text-align:center\">指令的字节地址 - 0x00003000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Instr</td>\n<td style=\"text-align:center\">Output[31:0]</td>\n<td style=\"text-align:center\">指令</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>寄存器堆 GRF</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Clk</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">时钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reset</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">同步复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WE</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A1[4:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 1 地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A2[4:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 2 地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A3[4:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 3 地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WD[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">写入数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D1[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">读出数据 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D2[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">读出数据 2</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>控制器 Controller</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Opcode[5:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Funct[5:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NPCMode</td>\n<td style=\"text-align:center\">Output[2:0]</td>\n<td style=\"text-align:center\">NPC 模式使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RegWrite</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">GRF 写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ALUSrc[1:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">B 为寄存器 / 立即数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ALUOp[3:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">ALU 模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MemoryWrite</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">DM 写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ExtOp[1:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">EXT 使能和模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GRFSrc[1:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">ALU/DM 回写</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>算术逻辑运算单元 ALU</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">B[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ALUOp[3:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">运算结果</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Zero</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">结果是否为零</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>数据存储器 DM</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Clk</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">时钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reset</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">同步复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">En</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">读地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">写数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Data[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">读出数据</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>结合上述模块输入输出和连接关系，做出各个子模块以及顶层架构，下面展示了顶层架构：</p>\n</li>\n</ul>\n<pre><code>module mips(\n    input clk,\n    input reset\n    );\n    NPC npc(.mode(controller.NPCMode),\n\t         .Zero(alu.Zero),\n\t         .pc(pc.out),\n\t\t\t\t.imm(im.Instr[25:0]),\n\t\t\t\t.ra(grf.RD1));\n\t\t\t\t\n    PC pc(.clk(clk),\n\t       .reset(reset),\n\t\t\t .in(npc.npc));\n\t \n    wire [31:0] IM_Addr;\n    assign IM_Addr = pc.out - 32'h0000_3000;\t \n\t IM im(.A(IM_Addr[13:2]));\t\t \n\n    GRF grf(.clk(clk),\n            .reset(reset),\n            .WE(controller.RegWrite),\n\t\t\t\t.A1(im.Instr[25:21]),\n\t\t\t\t.A2(im.Instr[20:16]),\n\t\t\t\t.A3(mux_grf_A3.B),\n\t\t\t\t.WD(mux_grf_D.B),\n\t\t\t\t.pc(pc.out));\t\t\t\t\n\n    ALU alu(.A(grf.RD1),\n\t         .B(mux_alu_B.B),\n\t\t\t\t.ALUOp(controller.ALUOp));\n\n    DM dm(.clk(clk),\n\t       .reset(reset),\n\t\t\t .WE(controller.MemoryWrite),\n\t\t\t .A(alu.C[13:0]),\n\t\t\t .D(grf.RD2),\n\t\t\t .pc(pc.out));\n\t\t\t \n\t EXT ext(.imm(im.Instr[15:0]),\n\t         .EXTOp(controller.EXTOp));\t\t \n\n    MUX_5_4 mux_grf_A3(.A0(im.Instr[15:11]),\n\t                    .A1(im.Instr[20:16]),\n\t\t\t\t\t\t\t  .A2(5'h1f),\n\t\t\t\t\t\t\t  .chose(controller.GRFA3Src));\n    \n\t MUX_32_4 mux_grf_D(.A0(alu.C),\n\t                    .A1(dm.Data),\n\t\t\t\t\t\t\t  .A2(npc.pc4),\n\t\t\t\t\t\t\t  .chose(controller.GRFSrc));\n\n    MUX_32_4 mux_alu_B(.A0(grf.RD2),\n\t                    .A1(ext.ext),\n\t\t\t\t\t\t\t  .chose(controller.ALUSrc));\n\n    Controller controller(.Opcode(im.Instr[31:26]),\n\t                       .Funct(im.Instr[5:0]));\n\nendmodule\n</code></pre>\n<h2 id=\"测试方案\"><a class=\"anchor\" href=\"#测试方案\">#</a> 测试方案</h2>\n<ul>\n<li>思路\n<ul>\n<li>沿用 P3 测试的思路和方法，重用其代码。可以完成 add,sub,ori,lw,sw,lui,nop 等运算和访存指令的测试。</li>\n<li>下面是 P3 的测试方案：<br />\n<img data-src=\"images/02db9f3d2ce45e0f9ffcc12a5701929ea7b1331d33d1f6f0af782ca68522e95e.png\" alt=\"图 0\" /><br />\n 例如：</li>\n</ul>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;time.h&gt;\n#define BATCH_SIZE 50\n\nFILE *pCode;\n\nint main() &#123;\n    srand((unsigned int)time(0));\n    pCode = fopen(&quot;mips_code.txt&quot;,&quot;w&quot;);\n    char s[120];\n    int i;\n    for (i = 0; i&lt; 32; i++) &#123;\n            sprintf(s,&quot;ori $%d,$%d,%d\\n&quot;,i,i + 1,0);\n            fprintf(pCode,s);\n    &#125;\n    fclose(pCode);\n    pCode = fopen(&quot;mips_code_ori1.txt&quot;,&quot;w&quot;);\n    for (i = 0; i&lt; 32; i++) &#123;\n            sprintf(s,&quot;ori $%d,$%d,%d\\n&quot;,i,i + 1,0xffff);\n            fprintf(pCode,s);\n    &#125;\n    fclose(pCode);\n    pCode = fopen(&quot;mips_code_ori2.txt&quot;,&quot;w&quot;);\n    for (i = 0 ; i &lt; BATCH_SIZE; i++) &#123;\n        sprintf(s,&quot;ori $%d,$%d,%d\\n&quot;,rand()% 32,rand()%32,rand()%0x10000);\n        fprintf(pCode,s);\n    &#125;\n    fclose(pCode);\n    return 0;\n&#125;\n\n</code></pre>\n<ul>\n<li>对于 beq,jal,jr 等命令，手动编写了若干条指令进行测试。<br />\n例如：</li>\n</ul>\n<pre><code>.data\n\n.text\njal loop\nbeq $t1,$t2,end\nori $t1,$0,114\nloop:\nori $t1,$0,100\nori $t2,$t1,0\njr $ra\nbeq $0,$0,loop\nend:\n\n</code></pre>\n</li>\n</ul>\n<h2 id=\"思考题\"><a class=\"anchor\" href=\"#思考题\">#</a> 思考题</h2>\n<ul>\n<li>思考题 1：\n<ul>\n<li>在课下实验中该 addr 信号从 ALU 的输出端口 C 来，这是因为访存时候的寻址通常是基址寻址，地址由 ALU 计算得到；但若有其他寻址方式，则还有可能从 EXT，GRF 等地方读取而来。</li>\n<li>由 ALU 计算得到的地址是字节地址，但 DM 中的数据索引是字地址，因此应该将字节地址除以四得到字地址，即 addr [11:2]。</li>\n</ul>\n</li>\n<li>思考题 2：\n<ul>\n<li>对于记录 “指令对应的控制信号如何取值”, 以其中一条指令 add 为例：</li>\n</ul>\n<pre><code> if(add) begin\n NPCMode = 3'b000;\n RegWrite = 1'b1;\n ALUOp = 4'b0000;\n MemoryWrite = 0;\n EXTOp = 2'b00;\n ALUSrc = 2'b00;\n GRFA3Src = 2'b00;\n GRFSrc = 2'b00;\n end\n</code></pre>\n记录每种指令对应信号的方式便于以指令为单位进行代码逻辑的查看，不同指令之间不进行耦合，有利于消除不同指令之间的逻辑冲突，能够减少 bug，也有利于直接添加指令。缺点则是代码数量偏大，每增加一个指令就需要重写全部控制信号，相当于不进行代码的复用，且检查时工作量较大。\n<ul>\n<li>对于记录 “控制信号每种取值所对应的指令” 的编码方式，与搭建电路时采用或门阵列一致，示例代码如下：</li>\n</ul>\n<pre><code>    NPCMode[0] = beq | jr;\n \tNPCMode[1] = jal | jr; \n \tNPCMode[2] = 0;\n    RegWrite = add | sub | ori | lw | lui | jal;\n \tALUOp[0] = sub | beq | lui;\n \tALUOp[1] = ori | lui;\n \tALUOp[2] = 0;\n \tALUOp[3] = 0;\n \tMemoryWrite = sw;\n \tEXTOp[0] = lw | sw;\n \tEXTOp[1] = 0;\n \tALUSrc[0] = ori | lw | sw | lui;\n \tALUSrc[1] = 0;\n \tGRFA3Src[0] = ori | lw | lui;\n \tGRFA3Src[1] = jal;\n \tGRFSrc[0] = lw;\n \tGRFSrc[1] = jal;\n</code></pre>\n这种方式与实际实现的电路有良好的对应关系。代码量明显较少，编写和修改时工作量较小，无需列出控制信号取 0 时的指令。但是不同指令耦合在一起，修复错误和增加指令时更容易出现逻辑问题；并且为了使得代码清晰，将控制信号不同位拆开表示。考虑到已经写清楚控制逻辑真值表理清逻辑，故采用此方式。</li>\n<li>思考题 3：\n<ul>\n<li>（以上升沿 + 高电平有效为例）异步复位当中复位信号的优先级比时钟信号要高，只要复位信号为高电平，不论时钟信号是什么，立即复位。即</li>\n</ul>\n<pre><code>always @(posedge clk,posedge reset) begin\n  if(reset) begin\n    /*reset*/\n  end\n  /*code*/\nend\n</code></pre>\n<ul>\n<li>同步复位当中时钟信号的优先级比复位信号要高，当且仅当时钟上升沿时复位信号为高电平才进行复位，将有一个周期无其他操作。即：</li>\n</ul>\n<pre><code>always @(posedge clk) begin\n  if(reset) begin\n    /*reset*/\n  end\n  /*code*/\nend\n</code></pre>\n</li>\n<li>思考题 4：<br />\naddu 相比于 add 指令，其操作多了<pre><code class=\"language-temp\">if temp32 ≠ temp31 then\nSignalException(IntegerOverflow)\n</code></pre>\n部分，即溢出检查，若忽略溢出，不进行检查，则操作为 else 部分<pre><code>else\nGPR[rd] ← temp\nendif\n</code></pre>\n和 add 完全相同。因此，忽略溢出时，add 与 addu 是等价的。addi 和 addiu 同理。</li>\n</ul>\n",
            "tags": [
                "计算机组成",
                "单周期CPU",
                "mips",
                "Verilog HDL"
            ]
        },
        {
            "id": "http://example.com/2024/04/13/CO_P3_document/",
            "url": "http://example.com/2024/04/13/CO_P3_document/",
            "title": "CO_P3_document",
            "date_published": "2024-04-13T15:36:10.000Z",
            "content_html": "<h1 id=\"cpu设计文档及思考题\"><a class=\"anchor\" href=\"#cpu设计文档及思考题\">#</a> CPU 设计文档及思考题</h1>\n<h2 id=\"设计草稿\"><a class=\"anchor\" href=\"#设计草稿\">#</a> 设计草稿</h2>\n<h4 id=\"顶层模块草稿\"><a class=\"anchor\" href=\"#顶层模块草稿\">#</a> 顶层模块草稿</h4>\n<ul>\n<li>整个 CPU 模块大致分为上游和下游两个有限状态机。上游是<em> Moore</em> 型的取指模块，输出将要执行的下一条指令；下游则是<em> Mealy</em> 型的译码、执行、访存、回写全过程模块。</li>\n<li>各个子模块以及粗略连接关系的初版草稿如下图所示。接下来，将要详细讨论各个模块的输入输出和连接关系。<br />\n<img data-src=\"images/2d704fb9acf79ce89de3c7cbe2eef1b921d488e0329c2a7f3e6329423d322d9b.jpg\" alt=\"\" /></li>\n</ul>\n<h4 id=\"顶层模块工程设计\"><a class=\"anchor\" href=\"#顶层模块工程设计\">#</a> 顶层模块工程设计</h4>\n<ul>\n<li>每条指令相应数据通路如下表所示。<br />\n&lt;table&gt;<br />\n&lt;tr&gt;<br />\n&lt;td rowspan = &quot;2&quot;&gt; 指令 &lt;/td&gt;<br />\n&lt;td&gt;IFU&lt;/td&gt;<br />\n&lt;td colspan = &quot;4&quot;&gt;GRF&lt;/td&gt;<br />\n&lt;td&gt;EXT&lt;/td&gt;<br />\n&lt;td colspan = &quot;2&quot;&gt;ALU&lt;/td&gt;<br />\n&lt;td colspan = &quot;2&quot;&gt;DM&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;Beq&lt;/td&gt;<br />\n&lt;td&gt;A1&lt;/td&gt;<br />\n&lt;td&gt;A2&lt;/td&gt;<br />\n&lt;td&gt;A3&lt;/td&gt;<br />\n&lt;td&gt;WD&lt;/td&gt;<br />\n&lt;td&gt;Imm&lt;/td&gt;<br />\n&lt;td&gt;A&lt;/td&gt;<br />\n&lt;td&gt;B&lt;/td&gt;<br />\n&lt;td&gt;A&lt;/td&gt;<br />\n&lt;td&gt;WD&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;add&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[25:21]&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[20:16]&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[15:11]&lt;/td&gt;<br />\n&lt;td&gt;ALU.C&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;GRF.D1&lt;/td&gt;<br />\n&lt;td&gt;GRF.D2&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;sub&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[25:21]&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[20:16]&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[15:11]&lt;/td&gt;<br />\n&lt;td&gt;ALU.C&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;GRF.D1&lt;/td&gt;<br />\n&lt;td&gt;GRF.D2&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;ori&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[25:21]&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[20:16]&lt;/td&gt;<br />\n&lt;td&gt;ALU.C&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[15:0]&lt;/td&gt;<br />\n&lt;td&gt;GRF.D1&lt;/td&gt;<br />\n&lt;td&gt;EXT.ext&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;lw&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[25:21]&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[20:16]&lt;/td&gt;<br />\n&lt;td&gt;DM.Data&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[15:0]&lt;/td&gt;<br />\n&lt;td&gt;GEF.D1&lt;/td&gt;<br />\n&lt;td&gt;EXT.ext&lt;/td&gt;<br />\n&lt;td&gt;ALU.C&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;sw&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[25:21]&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[20:16]&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[15:0]&lt;/td&gt;<br />\n&lt;td&gt;GRF.D1&lt;/td&gt;<br />\n&lt;td&gt;EXT.ext&lt;/td&gt;<br />\n&lt;td&gt;ALU.C&lt;/td&gt;<br />\n&lt;td&gt;GRF.D2&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;lui&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[20:16]&lt;/td&gt;<br />\n&lt;td&gt;ALU.C&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[15:0]&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;EXT.ext&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;beq&lt;/td&gt;<br />\n&lt;td&gt;ALU.Zero&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[25:21]&lt;/td&gt;<br />\n&lt;td&gt;IFU.Instr[20:16]&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;GRF.D1&lt;/td&gt;<br />\n&lt;td&gt;GRF.D2&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;td&gt;&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;/table&gt;</li>\n</ul>\n<h4 id=\"子模块\"><a class=\"anchor\" href=\"#子模块\">#</a> 子模块</h4>\n<ul>\n<li>\n<p>取指令单元 IRU</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Clk</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">时钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reset</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">异步复位 PC 到 0x00003000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Beq</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">跳转</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pc</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">PC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Instr</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">下一条指令</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>寄存器堆 GRF</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Clk</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">时钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reset</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">异步复位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WE</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A1[4:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 1 地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A2[4:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 2 地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A3[4:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 3 地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">WD[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">写入数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D1[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">读出数据 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D2[31:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">读出数据 2</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>控制器 Controller</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Opcode[5:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Funct[5:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BeqEn</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">是否为 beq</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RegWrite</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">GRF 写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ALUSrc</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">B 为寄存器 / 立即数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ALUOp[3:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">ALU 模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MemoryWrite</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">DM 写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ExtOp[1:0]</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">EXT 使能和模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Mem2Reg</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">ALU/DM 回写</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>算术逻辑运算单元 ALU</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">B[31:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">操作数 2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ALUOp[3:0]</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">模式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">运算结果</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Zero</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">结果是否为零</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>数据存储器 DM</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Clk</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">时钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">En</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">写使能</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">读地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">D</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">写数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Data</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">读出数据</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>结合上述模块输入输出和连接关系，画出如下顶层草稿：<img data-src=\"images/7a4b4ed583106fa9a117b40a86634518e4eee98aba539912f218986154cdbe92.png\" alt=\"图 0\" /></p>\n</li>\n</ul>\n<h4 id=\"二级子模块和模块实现\"><a class=\"anchor\" href=\"#二级子模块和模块实现\">#</a> 二级子模块和模块实现</h4>\n<ul>\n<li>\n<p>IFU<br />\n<img data-src=\"images/2d47a31b09fa074c2b0dc29091111985eefa5f302e2aee97ce357882e83e940c.jpg\" alt=\"图 4\" /></p>\n<ul>\n<li>PC(IFU)\n<ul>\n<li>寄存器加上异步复位到 0x00003000 功能，采用寄存器复位时复位至 0，因此需要在寄存器前将传入下一状态 - 0x00003000, 寄存器下游再 + 0x00003000。</li>\n</ul>\n</li>\n<li>NPC（IFU）\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">信号名</th>\n<th style=\"text-align:center\">方向</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">PC</td>\n<td style=\"text-align:center\">Inuput</td>\n<td style=\"text-align:center\">当前 PC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Instr</td>\n<td style=\"text-align:center\">Input</td>\n<td style=\"text-align:center\">当前指令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NPC</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">下一个 PC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PC4</td>\n<td style=\"text-align:center\">Output</td>\n<td style=\"text-align:center\">PC+4</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>IM(IFU)\n<ul>\n<li>是一个 ROM，为了使得 PC 的输出与 DM 实际地址相匹配，将 pc-0x00003000 再右移两位得到 addr。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Controller</p>\n<ul>\n<li>参考理论课讲解和教程，由 Contrller_AND 译码，其输入为 Opcode 和 FunctCode，输出为各指令独热码。<img data-src=\"images/59600af2d70e65619c614245b8ab0b97d3a535dfdde6ef74bfa407d89bf5aaa5.jpg\" alt=\"图 1\" /></li>\n<li>Controller_OR 释放控制信号，输入为指令的独热码，输出为上述各控制信号。<img data-src=\"images/7421e5e8c50e86b6635911f9ec1a9e313543a7691bed177bf83d7afe9feedd7e.jpg\" alt=\"图 2\" /></li>\n</ul>\n</li>\n<li>\n<p>ALU</p>\n<ul>\n<li>根据控制信号分别进行计算，结果由多路选择器选择。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"测试方案\"><a class=\"anchor\" href=\"#测试方案\">#</a> 测试方案</h2>\n<ul>\n<li>思路：\n<ul>\n<li>编写 MIPS 代码，在 MARS 上运行并查看寄存器和内存的数值；将 MIPS 代码转换为机器代码后导入 Logisim 的 ROM 中并运行，之后查看 logisim 当中的 GRF 和 DM 数据和 MARS 中是否一致。</li>\n<li>根据教程，先测试不依赖于其他指令，但其他指令测试需要用到的指令，如 ori，lui; 先测试 sw,lw 指令，再测试 add，sub 等指令。</li>\n</ul>\n</li>\n<li>数据构造：\n<ul>\n<li>进行测试的数据应该覆盖广泛，包括正数与负数，绝对值大的数，和零附近的数字；测试覆盖全部寄存器。</li>\n<li>测试数据应包含边界条件，如包括 0；包括 0xffff 等首位为 1 的立即数以测试扩展方式的正确性；跳转指令包含跳转到自己的指令。</li>\n<li>应用大批随机数进行测试。</li>\n</ul>\n</li>\n<li>自动化\n<ul>\n<li>手动编写代码测试并比对的工作过于繁重，因此利用程序生成 MIPS 代码，如使用 C 测试 ori 测试指令。</li>\n</ul>\n<pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#include&lt;time.h&gt;\n#define BATCH_SIZE 50\n\nFILE *pCode;\n\nint main() &#123;\n  srand((unsigned int)time(0));\n  pCode = fopen(&quot;mips_code.txt&quot;,&quot;w&quot;);\n  char s[120];\n  int i;\n  for (i = 0; i&lt; 32; i++) &#123;\n          sprintf(s,&quot;ori $%d,$%d,%d\\n&quot;,i,i + 1,0);\n          fprintf(pCode,s);\n  &#125;\n  fclose(pCode);\n  pCode = fopen(&quot;mips_code_ori1.txt&quot;,&quot;w&quot;);\n  for (i = 0; i&lt; 32; i++) &#123;\n          sprintf(s,&quot;ori $%d,$%d,%d\\n&quot;,i,i + 1,0xffff);\n          fprintf(pCode,s);\n  &#125;\n  fclose(pCode);\n  pCode = fopen(&quot;mips_code_ori2.txt&quot;,&quot;w&quot;);\n  for (i = 0 ; i &lt; BATCH_SIZE; i++) &#123;\n      sprintf(s,&quot;ori $%d,$%d,%d\\n&quot;,rand()% 32,rand()%32,rand()%0x10000);\n      fprintf(pCode,s);\n  &#125;\n  fclose(pCode);\n  return 0;\n&#125;\n</code></pre>\n其他相关代码（产生 add_sub）：<pre><code>#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n\nint main() &#123;\n  int i,j,k=0;\n  for ( i = 0; i &lt; 4; i++)\n  &#123;\n      for(j=i;j&lt;4;j++,k++) &#123;\n          printf(&quot;add $s%d,$t%d,$t%d\\n&quot;,0,i*2,j*2+1);\n          printf(&quot;sw $s0,%d($0)\\n&quot;,k*4);\n      &#125;\n  &#125;\n  for ( i = 0; i &lt; 4; i++)\n  &#123;\n      for(j=i;j&lt;4;j++,k++) &#123;\n          printf(&quot;sub $s%d,$t%d,$t%d\\n&quot;,0,i*2,j*2+1);\n          printf(&quot;sw $s0,%d($0)\\n&quot;,k*4);\n      &#125;\n  &#125;\n  return 0;\n&#125;\n</code></pre>\n</li>\n</ul>\n<pre><code>.data\n\n.text\nori $t0,$0,3\nori $t1,$0,4\nlui $t2,0xffff\nori $t2,$t2,0xffff\nlui $t3,0xffff\nori $t3,$t3,0xfffd\nlui $t4,0x7fff\nori $t4,$t4,0xffff\nlui $t5,0x7fee\nori $t5,$t5,0xfeff\nlui $t6,0x8000\nori $t6,$t6,0x0000\nlui $t7,0x8000\nori $t7,$t7,0x0003\nadd $s0,$t0,$t1\nsw $s0,0($0)\nadd $s0,$t0,$t3\nsw $s0,4($0)\nadd $s0,$t0,$t5\nsw $s0,8($0)\nadd $s0,$t0,$t7\nsw $s0,12($0)\nadd $s0,$t2,$t3\nsw $s0,16($0)\nadd $s0,$t2,$t5\nsw $s0,20($0)\nadd $s0,$t2,$t7\nsw $s0,24($0)\nadd $s0,$t4,$t5\nsw $s0,28($0)\nadd $s0,$t4,$t7\nsw $s0,32($0)\nadd $s0,$t6,$t7\nsw $s0,36($0)\nsub $s0,$t0,$t1\nsw $s0,40($0)\nsub $s0,$t0,$t3\nsw $s0,44($0)\nsub $s0,$t0,$t5\nsw $s0,48($0)\nsub $s0,$t0,$t7\nsw $s0,52($0)\nsub $s0,$t2,$t3\nsw $s0,56($0)\nsub $s0,$t2,$t5\nsw $s0,60($0)\nsub $s0,$t2,$t7\nsw $s0,64($0)\nsub $s0,$t4,$t5\nsw $s0,68($0)\nsub $s0,$t4,$t7\nsw $s0,72($0)\nsub $s0,$t6,$t7\nsw $s0,76($0)\n</code></pre>\n<ul>\n<li>MARS 结果与 Logisim 结果的自动对比目前还没有实现。</li>\n</ul>\n<h2 id=\"思考题\"><a class=\"anchor\" href=\"#思考题\">#</a> 思考题</h2>\n<ul>\n<li>思考题 1：\n<ul>\n<li>在 CPU 上游模块<em> Moore</em> 机中，发挥状态存储功能的是程序计数器 PC，发挥状态转移功能的是计算下个 pc 的 NPC。</li>\n<li>在 CPU 下游模块<em> Mealy</em> 机中，发挥状态存储功能的是寄存器堆 GRF，CPU 之外的 DM；发挥状态转移功能的是控制器 Controller，运算器 ALU 和扩展单元 EXT 等。</li>\n</ul>\n</li>\n<li>思考题 2：\n<ul>\n<li>在本次实验的要求下，此设计是合理的。\n<ul>\n<li>本实验当中，IM 中的指令相当于预置完成，在 CPU 执行过程当中，无需进行修改，且指令数量庞大，因此使用只读的存储阵列 ROM 比较合理。</li>\n<li>GRF 存储三十二个三十二位二进制数，且要求可读可写。由于数量较少且对速度要求高，不宜使用大型阵列 RAM。另外由于访问地址是 5 位且 0 号要特殊处理，直接使用寄存器实现比较合适。</li>\n<li>DM 是要求可读可写的大型数据存储器，使用 RAM 比较合适。</li>\n</ul>\n</li>\n<li>在真实的处理器当中，IM 要求可写，否则始终只能运行同一程序。因此不能够使用 ROM。</li>\n</ul>\n</li>\n<li>思考题 3：\n<ul>\n<li>尚未设计其他完整的模块，但是对一些模块预留了一些接口，程序具有可扩展性。比如考虑到部分跳转相关指令可能需要将 PC+4 存入 GRF，因此 IFU 添加了 PC4 输出，也增加了新控制信号输入以及 32 位数字输入。扩展了 GRF 的 WD,A3 选择器宽度。ALUOp 预留若干位。</li>\n</ul>\n</li>\n<li>思考题 4：\n<ul>\n<li>nop 对应汇编语句为 &lt;kbd&gt;sll $0,$0,0&lt;/kbd&gt; , 相当于不进行任何操作，RegWrite，MemWrite 等控制信号均为零。由于控制器的控制信号释放均由或门实现，故释放的控制信号均为 0 的 nop 指令无需加入控制信号真值表。</li>\n</ul>\n</li>\n<li>思考题 5:\n<ul>\n<li>测试点的数据不够强。指令集当中有 sub 和 nop 未进行测试。</li>\n<li>各个指令的情况：\n<ul>\n<li>ori 指令，lui 指令基本符合测试要求，但可以进行更多数据的测试。</li>\n<li>add 指令覆盖了正负数情况，但缺少 0 的测试，且其测试缺少较大整数（如计算完溢出，不过该情况无法在 MARS 上检查，可能要手动检查）和零附近整数的情况。</li>\n<li>sw，lw 指令测试较强。</li>\n<li>beq 指令覆盖了相等和不等的情况，但是只有向后跳转，没有跳转到自身和跳转到之前的情况。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "计算机组成",
                "单周期CPU",
                "mips",
                "Logisim"
            ]
        }
    ]
}