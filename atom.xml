<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>Zeng HX&#39;s Blog</title>
    <subtitle></subtitle>
    <icon>http://example.com/images/favicon.ico</icon>
    <link href="http://example.com" />
    <author>
      <name>Zeng Huaxu</name>
    </author>
    <updated>2024-04-13T15:36:14.000Z</updated>
    <entry>
        <id>http://example.com/2024/04/13/CO_P7_document/</id>
        <title>CO_P7_document</title>
        <link rel="alternate" href="http://example.com/2024/04/13/CO_P7_document/"/>
        <content type="html">&lt;h1 id=&#34;cpu设计文档及思考题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu设计文档及思考题&#34;&gt;#&lt;/a&gt; CPU 设计文档及思考题&lt;/h1&gt;
&lt;h3 id=&#34;设计草稿&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计草稿&#34;&gt;#&lt;/a&gt; 设计草稿&lt;/h3&gt;
&lt;h4 id=&#34;思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思路&#34;&gt;#&lt;/a&gt; 思路&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;工程主要分成两个部分：IO 支持以及异常 / 中断处理，结合教程大致按照以下顺序进行实现：
&lt;ul&gt;
&lt;li&gt;CPU 封装&lt;/li&gt;
&lt;li&gt;添加外设 Timer&lt;/li&gt;
&lt;li&gt;实现系统桥&lt;/li&gt;
&lt;li&gt;实现协处理器 CP0&lt;/li&gt;
&lt;li&gt;异常检测和流水&lt;/li&gt;
&lt;li&gt;添加异常处理指令&lt;/li&gt;
&lt;li&gt;进行中断响应&lt;/li&gt;
&lt;li&gt;异常处理程序（mips）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;各步实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#各步实现&#34;&gt;#&lt;/a&gt; 各步实现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;CPU 封装后与外界的接口主要是 clk，reset，IM 的地址和数据，内存空间的地址、数据和字节使能信号以及宏观 PC。另外由于输出需要还要实现 W 级各信号的接口。&lt;/li&gt;
&lt;li&gt;系统桥是纯组合逻辑模块，需要 CPU 的地址、数据、字节使能、PC 以及外设的相应信号。
&lt;ul&gt;
&lt;li&gt;CPU-&amp;gt; 外界。设置了 HitDM,HitTimer,HitInt 等信号判断输出设备 / 内存，再输出各个信号。其中最关键的是字节使能信号，例如&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;D&lt;/mi&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;?&lt;/mo&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mo mathvariant=&#34;normal&#34; lspace=&#34;0em&#34; rspace=&#34;0em&#34;&gt;′&lt;/mo&gt;&lt;/msup&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;;&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;DMByteEn = (HitDM) ? ByteEn : 4&amp;#x27;b0;&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.08125em;&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.946332em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.751892em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;′&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;外界 -&amp;gt;CPU。实现 PrRD 即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;assign PrRD  = (HitDM)     ? DM_RD :
                 (HitTimer0) ? Timer0_RD :
  					     (HitTimer1) ? Timer1_RD :
  					     32&#39;b0;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;CP0 设置在 M 级。CP0 可以设置在 E/M 级，考虑 store/load 类异常检测放在单独模块里比较清楚，放在了 M 级。&lt;strong&gt;在首次上级未通过以后发现 CP0 寄存器中大多数位为只可读&lt;/strong&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;端口&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;clk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;reset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;同步复位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;en&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CP0Addr[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写入地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CP0In[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写入数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;VPC[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;受害指令 PC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;BDIn&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;受害指令延迟槽标记&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ExcCode[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;异常类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HWIn[5:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外部中断信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXLClr&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXL 复位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CP0Out[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读出数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EPCOutp[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EPC 读出&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Req&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中断异常请求&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;BDOut&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;延迟槽标记&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;异常检测和流水需要在每一级添加 EXH 输入对应信号和指令信息，&lt;strong&gt;这里需要在原来数据通路中添加每一条指令信息，例如添加了 allCal，Store，Load 流水&lt;/strong&gt;。以便判断是否是溢出异常 / 取指（数）异常。实现了 EXH_F，EXH_D，EXH_E，EXH_M 模块，分别检测 pc 异常，syscall 和 RI 异常，溢出异常，Load/Store 类异常。越靠前异常优先级越高。&lt;/li&gt;
&lt;li&gt;异常处理指令在原有基础上简单添加即可。按照原有方式进行译码，添加了 CP0Write 写使能信号以便支持 mfc0 工作，添 4 加 rd 流水以便支持 mt（f）c0 指令和 CP0 交互。eret 通过清空延迟槽使得不执行延迟槽指令，这个过程中的暂停 / 转发包括将 mfc0 的 T_new_D 改为 3,mtc0 的 T_use_rt 改为 2。&lt;strong&gt;首次上机未通过后发现 eret 与 mtc0 存在数据冒险，因此设置了 eret 的暂停信号，这也意味着出现了另一优先级的问题，即 D 级的阻塞信号优先级高于清空信号。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;中断请求 Req 需要传给 D,E,M,W,MDU，触发中断后全部设置为初始值。另外如 Req，则 M 级的字节使能信号应该置 0。&lt;/li&gt;
&lt;li&gt;异常处理程序直接采用模板，采取直接 + 4 跳过方式处理异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;测试方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试方案&#34;&gt;#&lt;/a&gt; 测试方案：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;关于指令和异常的检测，采用了之前的指令。例如 add 和 sub 的异常检测，需要检测较小数字不溢出、较大数字不溢出、溢出情况等。&lt;/li&gt;
&lt;li&gt;异常和中断指令的处理，下载了课程组提供的指令当作异常处理指令。将异常处理指令的二进制编码存到另一个文件当中以便 testbench 读入。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;思考题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思考题&#34;&gt;#&lt;/a&gt; 思考题：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;思考题 1：请查阅相关资料，说明鼠标和键盘的输入信号是如何被 CPU 知晓的？
&lt;ul&gt;
&lt;li&gt;鼠标 / 键盘作为外设，映射到某个地址空间当中，通过总线连接到桥芯片，经由桥芯片和 CPU 进行交互。&lt;/li&gt;
&lt;li&gt;当鼠标 / 键盘输入时，产生中断信号，中断控制器将外设对应的中断号发送给 CPU，CPU 根据中断号找到操作系统的中断服务程序地址，进入对应中断服务程序完成相应工作。其中采用了&lt;strong&gt; MMU 技术&lt;/strong&gt;使得外设与 CPU 的交互无需经由主存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 2：请思考为什么我们的 CPU 处理中断异常必须是已经指定好的地址？如果你的 CPU 支持用户自定义入口地址，即处理中断异常的程序由用户提供，其还能提供我们所希望的功能吗？如果可以，请说明这样可能会出现什么问题？否则举例说明。（假设用户提供的中断处理程序合法）
&lt;ul&gt;
&lt;li&gt;中断异常处理的流程固定。因此统一中的断处理程序有助于全面覆盖各种情况，保证处理的统一性和正确性。&lt;/li&gt;
&lt;li&gt;本 CPU 未实现用户自定义中断处理功能。但支持自定义的 CPU 应该可以实现。如果实现了自定义中断入口的 CPU，其中断处理的灵活性更好，但是可能导致系统更加复杂。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 3：为何与外设通信需要 Bridge？
&lt;ul&gt;
&lt;li&gt;外设数量和种类众多，如果直接用 CPU 和各个外设相连，那么系统的可读性和清晰性得不到保证，也不易于进行扩展。将外部通信功能提取出来统一交给桥芯片实现，符合了高内聚低耦合的原则，使得 CPU 可以将所有外设都当成内存空间进行处理，统一性好。&lt;/li&gt;
&lt;li&gt;外设的通信方式各不相同，并且地址空间可能重合，桥芯片承担了转换交互信号和地址信息的功能。在实际实现中，还分为北桥芯片和南桥芯片。前者负责 CPU 和主存 / 显卡的连接，后者负责前者与各种 I/O 设备的连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 4：请阅读官方提供的定时器源代码，阐述两种中断模式的异同，并针对每一种模式绘制状态移图。
&lt;ul&gt;
&lt;li&gt;相同之处是都使用了初值寄存器、计数器、控制寄存器，其中中断屏蔽行为相同，也都是在 count 为 0 时产生中断信号。&lt;/li&gt;
&lt;li&gt;不同之处是模式 0 在完成计数时 Enable 置 0，不再计数，持续产生中断信号，直到 Enable 被外部修改为 1；而模式 1 完成计数后产生一个周期中断就再进行一轮计数，用于产生周期性中断。&lt;/li&gt;
&lt;li&gt;以 preset 为 3 为例，状态转移图如下：&lt;br /&gt;
&lt;img data-src=&#34;images/64bf838fa20b6f33343a41eb8dfcc116de7677a0d8160c1105bb93cdf65b2f37.png&#34; alt=&#34;图 1&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 5：倘若中断信号流入的时候，在检测宏观 PC 的一级如果是一条空泡（你的 CPU 该级所有信息均为空）指令，此时会发生什么问题？在此例基础上请思考：在 P7 中，清空流水线产生的空泡指令应该保留原指令的哪些信息？
&lt;ul&gt;
&lt;li&gt;如果是一条空泡，则会将 0x00000000 当作宏观 PC 写入 EPC 当中，这会导致中断处理完成以后回不到当前位置上。&lt;/li&gt;
&lt;li&gt;PC 和 BD 两个信号在插入空泡时应该保留被暂停指令的值。保留 PC 的原因如上所述，而保留 BD 则是因为当空泡遇到中断时，如 BD 不保留，则无法判断当前被暂停（将要执行）的指令是否是延迟槽指令。如果是延迟槽指令且 BD 被置零，那么前一条跳转指令就失效了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 6：为什么 jalr 指令为什么不能写成 jalr $31, $31？
&lt;ul&gt;
&lt;li&gt;jalr 指令读取 rs 寄存器，写到 rd 寄存器。当 jalr 指令的延迟槽遇到中断时，jalr 执行完毕，再进行中断处理程序，此时 31 号寄存器已经被 jalr 修改，等到处理结束回到 jalr 重新执行时，jalr 读到的 $31 是已经被自己修改的，会导致执行错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="计算机组成" scheme="http://example.com/categories/computer-composition/" />
        <category term="mips" scheme="http://example.com/tags/mips/" />
        <category term="五级流水线CPU" scheme="http://example.com/tags/%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/" />
        <category term="Verilog HDL" scheme="http://example.com/tags/Verilog-HDL/" />
        <category term="异常和中断" scheme="http://example.com/tags/%E5%BC%82%E5%B8%B8%E5%92%8C%E4%B8%AD%E6%96%AD/" />
        <updated>2024-04-13T15:36:14.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/04/13/CO_P6_document/</id>
        <title>CO_P6_document</title>
        <link rel="alternate" href="http://example.com/2024/04/13/CO_P6_document/"/>
        <content type="html">&lt;h1 id=&#34;cpu设计文档及思考题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu设计文档及思考题&#34;&gt;#&lt;/a&gt; CPU 设计文档及思考题&lt;/h1&gt;
&lt;h3 id=&#34;设计草稿&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计草稿&#34;&gt;#&lt;/a&gt; 设计草稿&lt;/h3&gt;
&lt;h4 id=&#34;思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思路&#34;&gt;#&lt;/a&gt; 思路&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在 P5 草稿基础上进行修订，加入了乘除模块和存储器外置，先画出流水线 CPU 的设计示意图如下。其中正三角表示转发的供给者，倒三角表示转发的需求者。部分控制信号连线省略了。&lt;br /&gt;
&lt;img data-src=&#34;images/6292977b93723d75aba6e9e95135ccdc8d79fe355688e75db69039943b613f99.png&#34; alt=&#34;图 2&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;工程化设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工程化设计&#34;&gt;#&lt;/a&gt; 工程化设计&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;先对需要实现的指令进行分类，对每个类别设计数据通路。分成以下几类：Cal,immCal,irCal,Load,Store,Branch,jWrite,jUse,mdCal,mdSet,mdGet, 大多数沿用之前的通路。&lt;br /&gt;
数据通路的设计如下，其中标记橙色部分为转发的需求者，需要替换为转发需求者多路选择器的输出：&lt;br /&gt;
&lt;img data-src=&#34;images/7027256ffc8615969f33f4c77e573bfe195642d723004b2a04d16ce735f2a639.png&#34; alt=&#34;图 1&#34; /&gt;&lt;/li&gt;
&lt;li&gt;控制信号的设计基本延续了之前的指令，添加了少量信号。&lt;/li&gt;
&lt;li&gt;暂停转发的设计如下 (延续 P5)：
&lt;ul&gt;
&lt;li&gt;暂停 / 转发的策略信号：rs-Tuse,rt-Tuse 是从存到 D 级开始，过多少周期用到。Tnew 是从存入当前寄存器开始，过多少周期更新数据。&lt;/li&gt;
&lt;li&gt;暂停信号例如 (rs-Tuse &amp;lt; Tnew_E &amp;amp;&amp;amp; rs == A3@E &amp;amp;&amp;amp; RegWrite@E &amp;amp;&amp;amp; rs != 0)。其他同理，将两个子公式析取起来得到 rs_Stall，将 rs_Stall 和 rt_Stall 析取得到 Stall。&lt;/li&gt;
&lt;li&gt;转发信号的条件则是信号已经产生并且读写同一个寄存器、寄存器不为零号、写使能。由于采用集中式译码，因此 “信号已经产生” 的条件不是查看后面流水级寄存器得到的 T_new 为零，而是等到将要转发的那个周期中 T_new 为零。即 T_new_2D 为零，T_new_2E 小于等于一，T_new_2M 小于等于 2。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;添加 Stall_md 信号，当乘除模块 start 或 busy 时 D 级为乘除指令时暂停&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;添加 E 级的转发选择信号，如果是 mfhi/mflo 指令应该转发 MDR.Out&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;模块设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模块设计&#34;&gt;#&lt;/a&gt; 模块设计&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PC&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Clk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Reset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;同步复位到 0x00003000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;In&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;npc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Out&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pc&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IM&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令的字节地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Out[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GRF&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Clk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Reset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;同步复位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;WE&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A1[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 1 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A2[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 2 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A3[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 3 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;WD[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写入数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D1[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读出数据 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D2[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读出数据 2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NPC&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;BLOCK_NPC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;冻结信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NPCMode[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;运算模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC_Out[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;F 级 PC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC_D[31;0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D 级 PC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Imm&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input[25:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25 位立即数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ra&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ra&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;beq&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;beq 两数是否相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pc8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC_D+8(PC_Out+4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;npc&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NPC&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EXT&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXTMode[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Imm16&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;待扩展立即数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ext[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;结果&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Controller&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Opcode[5:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Funct[5:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;rs[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;rt[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T_new_E[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T_new_D[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T_new_M[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RegWrite_E&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RegWrite_D&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RegWrite_M&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NPCMode&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NPC 模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXTMode&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXT 使能和模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A3Src[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALU/DM 回写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALUSrc[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B 为寄存器 / 立即数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALUMode[3:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALU 模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MemoryWrite&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DM 写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;WDSrc[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Ouput&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DM 选择&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RegWrite&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;GRF 写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Stall&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;暂停&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DFV1_DSrc[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DFV2_DSrc[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DFV1_ESrc[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DFV2_ESrc[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DFData_MSrc[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T_new_D[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;产生结果时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ALU&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALUMode[3:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;C[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;运算结果&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;D&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CLK&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时钟信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Reset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;同步复位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;BLOCK_D&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;冻结信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IR[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC_D&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IR_()_D&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Ouput&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令的各个域&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试方案&#34;&gt;#&lt;/a&gt; 测试方案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;进行一定的手动测试。其中可以先进行单条指令的测试。这里使用了部分 P5 的测试点，并构造了一些其他点测试新指令，如：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;.data

.text
  ori $1,$0,12
  sw $1,0($0)
  ori $2,$0,15
  sb $2,1($0)
  ori $3,$0,1376
  sh $3,2($0)
  ori $4,$0,0xffff
  sh $4,4($0)
  lui $5,0xffff
  sb $5,7($0)
  slt $10,$5,$4
  sh $10,6($0)
  slt $11,$1,$2
  sb $11,8($0)
  slt $10,$3,$1
  slt $11,$1,$4
  sltu $10,$5,$4
  sltu $11,$1,$2
  sltu $10,$3,$1
  sltu $11,$1,$4
  and $1,$2,$1
  sb $1,10($0)
  and $2,$3,$3
  sh $2,14($0)
  and $5,$5,$3
  lw $4,0($0)
  and $4,$5,$4
  lh $3,0($0)
  or $1,$2,$1
  lb $3,3($0)
  or $2,$3,$3
  lh $5,4($0)
  or $5,$5,$3
  lb $4,5($0)
  or $4,$5,$4
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;多条指令之间的暂停转发的测试。为了进行充分覆盖，将指令分成不同的类型，类型内和类型之间进行测试。包括前一条指令与后一条指令数据相关，隔一条指令数据相关，隔两条指令数据相关。测试样例如下 (算数指令和立即数指令内和之间)：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;.data

.text
  ori $1,$0,12
  addi $2,$0,15
  ori $3,$0,16
  addi $4,$0,17
  add $1,$2,$3
  sub $2,$3,$1
  add $1,$2,$3
  sub $3,$1,$2
  add $1,$2,$3
  nop
  or $3,$1,$2
  add $1,$2,$3
  nop
  sub $3,$2,$1
  and $1,$2,$3
  nop
  nop
  slt $3,$1,$2
  add $1,$2,$3
  nop
  nop
  sltu $3,$2,$1
  add $1,$2,$3
  andi $3,$1,15
  add $1,$2,$3
  nop
  ori $3,$1,13
  add $1,$2,$3
  nop
  nop
  ori $3,$1,15
  and $1,$2,$3
  ori $3,$1,15
  or $1,$3,$2
  ori $3,$1,15
  nop
  add $1,$3,$2
  ori $3,$1,15
  nop
  add $1,$2,$3
  ori $3,$1,15
  nop
  nop
  or $1,$3,$2
  ori $3,$1,15
  nop
  nop
  or $1,$2,$3
  lui $1,0xff
  add $1,$2,$1
  lui $1,0xff
  add $1,$1,$1
  lui $1,0xff
  nop
  add $1,$2,$1
  lui $1,0x1
  nop
  add $2,$1,$2
  lui $1,0x11
  nop
  nop
  add $2,$1,$2
  lui $1,0x1
  nop
  nop
  add $2,$2,$1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;思考题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思考题&#34;&gt;#&lt;/a&gt; 思考题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;思考题 1：
&lt;ul&gt;
&lt;li&gt;乘除法需要&lt;strong&gt;较长的计算时间，独立出来进行计算，与不用到乘除模块的指令并行进行能够显著提高效率&lt;/strong&gt;；并且部件用到了大量的加法器，规模较大，无法简单复用 ALU 模块。&lt;/li&gt;
&lt;li&gt;为了保证乘除模块的独立性，不至于和其他的指令产生数据相关和冒险，设置专用寄存器 hi/lo。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 2：
&lt;ul&gt;
&lt;li&gt;流水线乘法器（除法器）可以采用横向进位的方式，然后&lt;strong&gt;在每一级（若干位）插入一个流水线寄存器，将整个组合电路分成 N 个流水级&lt;/strong&gt;，N 个周期算出结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 3：
&lt;ul&gt;
&lt;li&gt;将 busy 和 start 信号传入 D 级中，如果 start || busy 且 D 级的指令使用到了乘除模块，则 D 级指令暂停，否则继续执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 4:
&lt;ul&gt;
&lt;li&gt;按字节使能的方式来处理数据，要存入哪几个字节一目了然，相比于使用其它控制信号，代码易读且易修改，将来有其它的写入方式也容易添加。&lt;/li&gt;
&lt;li&gt;通过字节使能信号的标记，能清晰地看出要将待写入的有效字节放在哪几位上，和 Mem 中写入的位统一。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 5：
&lt;ul&gt;
&lt;li&gt;实际读写时写入和读出的数据都是一个字而不是一个字节。&lt;/li&gt;
&lt;li&gt;如果数据是按照字节存储的，例如 char，那么按照字节读取的效率高于按字读取的效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 6：
&lt;ul&gt;
&lt;li&gt;延续和扩展了之前使用的一些规范手段，例如采用宏定义标记多路选择器的选择信号；合理命名指令译码信号、控制信号和选择器等等。&lt;/li&gt;
&lt;li&gt;采用了一些抽象手段，例如给指令进行分类，将若干个信号析取合成一个指令类信号，例如&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;∣&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;;&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Cal = add | sub | and | or;&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∣&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 等。释放相应控制信号尽可能采用抽象类信号。&lt;/li&gt;
&lt;li&gt;如上所述，在译码过程中采用的是控制信号驱动的译码。&lt;strong&gt;在记录相应指令信号时采用指令类的信号使得代码量减小且易读。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;处理数据冲突时先记录 T_use_rs 和 T_use_rt T_new，再根据大小关系判断暂停和转发信号，在此次设计中同样&lt;strong&gt;将 T_use_rs 和 T_use_rt T_new 信号的记录换成指令类&lt;/strong&gt;，其他信号几乎无修改即可实现冲突处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 7：
&lt;ul&gt;
&lt;li&gt;在本分类当中，产生冲突的组合有&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    Cal            Cal
    immCal         irCal
    irCal          Load
    Load     +     Store
    jWrite         Branch
    mdGet          jUse
                   mdCal
&lt;/code&gt;&lt;/pre&gt;
以及&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;G&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;mdCal + mdCal/mdGet/mdSet&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.77777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;G&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;解决方案为记录相应的 T-use-rs 和 T-use-rt T-new，通过比较判断暂停和转发情况。&lt;strong&gt;特别的，乘除模块的冲突使用 busy/start 信号判断是否需要暂停，始终无需转发&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对每个类型构造相邻 / 相隔一条指令 / 相隔两条指令来测试暂停和转发的正确性，样例同测试方案样例 (展示了 Cal 内部测试)：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;.data

.text
  ori $1,$0,12
  addi $2,$0,15
  ori $3,$0,16
  addi $4,$0,17
  add $1,$2,$3
  sub $2,$3,$1
  add $1,$2,$3
  sub $3,$1,$2
  add $1,$2,$3
  nop
  or $3,$1,$2
  add $1,$2,$3
  nop
  sub $3,$2,$1
  and $1,$2,$3
  nop
  nop
  slt $3,$1,$2
  add $1,$2,$3
  nop
  nop
  sltu $3,$2,$1
  add $1,$2,$3
  andi $3,$1,15
  add $1,$2,$3
  nop
  ori $3,$1,13
  add $1,$2,$3
  nop
  nop
  ori $3,$1,15
  and $1,$2,$3
  ori $3,$1,15
  or $1,$3,$2
  ori $3,$1,15
  nop
  add $1,$3,$2
  ori $3,$1,15
  nop
  add $1,$2,$3
  ori $3,$1,15
  nop
  nop
  or $1,$3,$2
  ori $3,$1,15
  nop
  nop
  or $1,$2,$3
  lui $1,0xff
  add $1,$2,$1
  lui $1,0xff
  add $1,$1,$1
  lui $1,0xff
  nop
  add $1,$2,$1
  lui $1,0x1
  nop
  add $2,$1,$2
  lui $1,0x11
  nop
  nop
  add $2,$1,$2
  lui $1,0x1
  nop
  nop
  add $2,$2,$1
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;思考题 8：
&lt;ul&gt;
&lt;li&gt;对于单条指令的测试，与 P3/P4 基本相同，即构造不同类别、不同大小、边界条件的数据，以保证测试的覆盖性。&lt;/li&gt;
&lt;li&gt;对于冲突和冒险的测试，根据上面思考题 7 提到的方案进行构造。对于寄存器冲突的测试，只需要测试相邻 / 相隔一个周期 / 相隔两个周期即可，因为相隔三个周期及以上已存入通用寄存器下一个周期才读取并存入流水线寄存器，不会产生数据冒险。对于乘除模块，则需要测试相隔高达 5/10 个周期。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="计算机组成" scheme="http://example.com/categories/computer-composition/" />
        <category term="mips" scheme="http://example.com/tags/mips/" />
        <category term="五级流水线CPU" scheme="http://example.com/tags/%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/" />
        <category term="Verilog HDL" scheme="http://example.com/tags/Verilog-HDL/" />
        <updated>2024-04-13T15:36:13.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/04/13/CO_P5_document/</id>
        <title>CO_P5_document</title>
        <link rel="alternate" href="http://example.com/2024/04/13/CO_P5_document/"/>
        <content type="html">&lt;h1 id=&#34;cpu设计文档及思考题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu设计文档及思考题&#34;&gt;#&lt;/a&gt; CPU 设计文档及思考题&lt;/h1&gt;
&lt;h3 id=&#34;设计草稿&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计草稿&#34;&gt;#&lt;/a&gt; 设计草稿&lt;/h3&gt;
&lt;h4 id=&#34;思路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思路&#34;&gt;#&lt;/a&gt; 思路&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在单周期 CPU 的基础上，加入流水线寄存器以分割 CPU 的 5 个执行阶段。为了处理冒险，需要加入暂停和转发的模块。为了使得思路更加清晰，先画出流水线 CPU 的设计示意图如下。其中正三角表示转发的供给者，倒三角表示转发的需求者。部分控制信号连线省略了。&lt;br /&gt;
&lt;img data-src=&#34;images/28bf9b977c14dacd968f75dcc97f35ba8fd0e0317b2828032c42f7389de474da.png&#34; alt=&#34;图 0&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;工程化设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工程化设计&#34;&gt;#&lt;/a&gt; 工程化设计&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;数据通路的设计如下，其中标记橙色部分为转发的需求者，需要替换为转发需求者多路选择器的输出：&lt;br /&gt;
&lt;img data-src=&#34;images/99439b57b3bce70c446879f3debd75a627f33a71dbd14ce8cdc4eef1bf23790a.png&#34; alt=&#34;图 1&#34; /&gt;&lt;/li&gt;
&lt;li&gt;控制信号的设计如下：&lt;br /&gt;
&lt;img data-src=&#34;images/608d10bbdd5b4efcdfe8b68fe031b0e75053696d4870a4c6d24f71e42acc6f2a.png&#34; alt=&#34;图 2&#34; /&gt;&lt;/li&gt;
&lt;li&gt;暂停转发的设计如下：
&lt;ul&gt;
&lt;li&gt;暂停 / 转发的策略信号：rs-Tuse,rt-Tuse 是从存到 D 级开始，过多少周期用到。Tnew 是从存入当前寄存器开始，过多少周期更新数据。&lt;/li&gt;
&lt;li&gt;暂停信号例如 (rs-Tuse &amp;lt; Tnew_E &amp;amp;&amp;amp; rs == A3@E &amp;amp;&amp;amp; RegWrite@E &amp;amp;&amp;amp; rs != 0)。其他同理，将两个子公式析取起来得到 rs_Stall，将 rs_Stall 和 rt_Stall 析取得到 Stall。&lt;/li&gt;
&lt;li&gt;转发信号的条件则是信号已经产生并且读写同一个寄存器、寄存器不为零号、写使能。由于采用集中式译码，因此 “信号已经产生” 的条件不是查看后面流水级寄存器得到的 T_new 为零，而是等到将要转发的那个周期中 T_new 为零。即 T_new_2D 为零，T_new_2E 小于等于一，T_new_2M 小于等于 2。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;模块设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模块设计&#34;&gt;#&lt;/a&gt; 模块设计&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PC&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Clk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Reset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;同步复位到 0x00003000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;In&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;npc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Out&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pc&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IM&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令的字节地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Out[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GRF&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Clk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Reset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;同步复位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;WE&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A1[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 1 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A2[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 2 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A3[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 3 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;WD[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写入数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D1[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读出数据 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D2[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读出数据 2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NPC&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;BLOCK_NPC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;冻结信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NPCMode[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;运算模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC_Out[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;F 级 PC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC_D[31;0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D 级 PC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Imm&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input[25:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25 位立即数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ra&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ra&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;beq&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;beq 两数是否相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pc8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC_D+8(PC_Out+4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;npc&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NPC&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EXT&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXTMode[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Imm16&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;待扩展立即数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ext[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;结果&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Controller&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Opcode[5:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Funct[5:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;rs[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;rt[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T_new_E[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T_new_D[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T_new_M[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RegWrite_E&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RegWrite_D&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RegWrite_M&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NPCMode&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NPC 模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXTMode&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXT 使能和模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A3Src[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALU/DM 回写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALUSrc[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B 为寄存器 / 立即数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALUMode[3:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALU 模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MemoryWrite&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DM 写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;WDSrc[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Ouput&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DM 选择&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RegWrite&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;GRF 写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Stall&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;暂停&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DFV1_DSrc[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DFV2_DSrc[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DFV1_ESrc[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DFV2_ESrc[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DFData_MSrc[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;T_new_D[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;产生结果时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ALU&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALUMode[3:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;C[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;运算结果&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DM&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Clk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Reset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;同步复位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;En&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;WD[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RD[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读出数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;D&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CLK&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时钟信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Reset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;同步复位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;BLOCK_D&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;冻结信号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IR[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC_D&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34; colspan=&#34;2&#34;&gt;Output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IR_()_D&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Ouput&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令的各个域&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;E&lt;br /&gt;
&lt;img data-src=&#34;images/625d00dca62ad95379426a55da3387f2f4e534f1821a9a46b5c28ea4cbcce0de.png&#34; alt=&#34;图 4&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;images/938537a1f935ac242627015e77c733ce509195603354664c31f8c3d6c8f4ba4a.png&#34; alt=&#34;图 5&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M&lt;br /&gt;
&lt;img data-src=&#34;images/f765352219919b11eb3d00f18be6c67bda79a86c95288504d37ad6d8f1da96ef.png&#34; alt=&#34;图 6&#34; /&gt;&lt;br /&gt;
&lt;img data-src=&#34;images/7f81613d9762967ba1403084aadfbf47d0db12d68d737cb4128d1812bf5b0031.png&#34; alt=&#34;图 7&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;W&lt;br /&gt;
&lt;img data-src=&#34;images/c775f2502faa5fdf8856ade483ee0f89031fedf871c29d5faafbd2922c627ea4.png&#34; alt=&#34;图 8&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;测试方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试方案&#34;&gt;#&lt;/a&gt; 测试方案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;进行一定的手动测试。其中可以先进行单条指令的测试。这里使用了部分 P3,P4 的测试点。&lt;/li&gt;
&lt;li&gt;多条指令之间的暂停转发的测试。为了进行充分覆盖，将指令分成不同的类型，类型内和类型之间进行测试。包括前一条指令与后一条指令数据相关，隔一条指令数据相关，隔两条指令数据相关。测试样例如下 (算数指令和立即数指令内和之间)：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;.data

.text
  ori $1,$0,12
  ori $2,$0,15
  ori $3,$0,16
  ori $4,$0,17
  add $1,$2,$3
  sub $2,$3,$1
  add $1,$2,$3
  sub $3,$1,$2
  add $1,$2,$3
  nop
  sub $3,$1,$2
  add $1,$2,$3
  nop
  sub $3,$2,$1
  add $1,$2,$3
  nop
  nop
  sub $3,$1,$2
  add $1,$2,$3
  nop
  nop
  sub $3,$2,$1
  add $1,$2,$3
  ori $3,$1,15
  add $1,$2,$3
  nop
  ori $3,$1,13
  add $1,$2,$3
  nop
  nop
  ori $3,$1,15
  add $1,$2,$3
  ori $3,$1,15
  add $1,$3,$2
  ori $3,$1,15
  nop
  add $1,$3,$2
  ori $3,$1,15
  nop
  add $1,$2,$3
  ori $3,$1,15
  nop
  nop
  add $1,$3,$2
  ori $3,$1,15
  nop
  nop
  add $1,$2,$3
  lui $1,0xff
  add $1,$2,$1
  lui $1,0xff
  add $1,$1,$1
  lui $1,0xff
  nop
  add $1,$2,$1
  lui $1,0x1
  nop
  add $2,$1,$2
  lui $1,0x11
  nop
  nop
  add $2,$1,$2
  lui $1,0x1
  nop
  nop
  add $2,$2,$1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;思考题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思考题&#34;&gt;#&lt;/a&gt; 思考题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;思考题 1：当分支指令于先前的指令不会产生相关时，能够提高效率，但是如果产生数据相关，很有可能分支指令要被迫暂停等待数据更新。例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;lw  $1,0($0)
lw  $2,0($3)
beq $1,$2,label
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;beq 指令要等待两个周期，直到 lw 将要更新的 $2 写入 W 级，才能执行；这和没有提前分支判断（需要等待一个周期）执行完所需要的时钟周期数量是相同的，且不提前判断还可以让延迟槽的指令进入 D 级开始译码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;思考题 2：jal 指令的效果是在 jal 之后所执行的 jr（$ra 未被修改）能够跳转回接下来要执行的指令。由于延迟槽中的指令（即 jal 的 pc+4）已经在跳转前紧随 jr 执行完成，无需也不应该再执行一次，返回时应执行延迟槽的下一条指令，故应该保存 pc+8。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;思考题 3：如果直接从功能部件进行转发，那么意味着接收者会先计算错误的信号，再计算正确信号。从本周期时钟上升沿开始，接收者接收到正确的输入信号并产生本级结果所经历的组合逻辑延时是提供级和接受级组合逻辑延时之和，这导致如果想要获得稳定正确的输出，则时钟周期被迫延长，这违反了流水线设计的初衷。因此应该在下一周期结果存到流水线寄存器当中再转发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;思考题 4：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是因为由于流水线执行的特点，存在 GRF 同时被读和被写的冒险的情况，即在某上升沿到来之前，之前在 W 级的指令已经准备好数据和控制信号，而此时在 D 级的信号读出更新前数据，将要存到 E 级流水线寄存器当中。此时 D 级读出的信号并不是我们真正想要的。又因为新信号已经产生并传到 GRF，我们可以通过 GRF 的内部转发把 D 级读出的信号换成新的信号，以解决冒险。&lt;/li&gt;
&lt;li&gt;实现方法：在 GRF 读出数据之前判断是否与将要写入的数据地址相同且不为零，若条件成立，则输出将要写入的值，否则输出寄存器中的值。即：&lt;pre&gt;&lt;code&gt;assign RD1 = ((A1 == A3) &amp;amp;&amp;amp; (A1 != 0) &amp;amp;&amp;amp; WE) ? WD : register[A1];
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;思考题 5：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求者有 D 级的 GRF.RD1,GRF.RD2，E 级的 V1,V2 以及 M 级的 Data；而供给者有 E 级的 PC8，M 级别的 PC8 和 AO，以及 W 级的要写入的数据 WD。&lt;/li&gt;
&lt;li&gt;假设各个接受方的多路选择器分别是 MFV1_D,MFV2_D,MFV1_E,MFV2_E,MFData_M, 分别对应输出相应的更新数据，而供给方只需要在 M 级有一多路选择器 MFBack_M, 其数据来自 ALUO_M 和 PC8_M。&lt;/li&gt;
&lt;li&gt;转发数据流包括
&lt;ul&gt;
&lt;li&gt;PC8_E-&amp;gt;MFV1_D,&lt;/li&gt;
&lt;li&gt;PC8_E-&amp;gt;MFV2_D,&lt;/li&gt;
&lt;li&gt;MFBack_M-&amp;gt;MFV1_D,&lt;/li&gt;
&lt;li&gt;MFBack_M-&amp;gt;MFV2_D,&lt;/li&gt;
&lt;li&gt;MFBack_M-&amp;gt;MFV1_E,&lt;/li&gt;
&lt;li&gt;MFBack_M-&amp;gt;MFV2_E,&lt;/li&gt;
&lt;li&gt;WD_W-&amp;gt;MFV1_D,&lt;/li&gt;
&lt;li&gt;WD_W-&amp;gt;MFV2_D,&lt;/li&gt;
&lt;li&gt;WD_W-&amp;gt;MFV1_E,&lt;/li&gt;
&lt;li&gt;WD_W-&amp;gt;MFV2_E,&lt;/li&gt;
&lt;li&gt;WD_W-&amp;gt;MFData_M,&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;思考题 6：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令的分类：目前可以分成如下几类：
&lt;ul&gt;
&lt;li&gt;寄存器算术逻辑运算类型。此类型的运算读两个寄存器，写一个寄存器，使用 ALU 算出结果，不用 Memory。因此 T_use_rs=T_use_rt=1,T_new_D=2。&lt;/li&gt;
&lt;li&gt;寄存器 - 立即数算术逻辑运算类型。此类型的运算读一个个寄存器，用一个立即数，写一个寄存器，使用 ALU 算出结果，不用 Memory。因此 T_use_rs=1,T_new_D=2。&lt;/li&gt;
&lt;li&gt;立即数算术逻辑运算类型。只用立即数算出结果，不用寄存器，T_new=2。&lt;/li&gt;
&lt;li&gt;load 类型。访存。用寄存器，立即数算出地址访问 Mem，修改 rt。T_use_rs=1，T_new_D=3。&lt;/li&gt;
&lt;li&gt;store 类型。T_use_rs=1，不修改寄存器。&lt;/li&gt;
&lt;li&gt;branch 类型。T_use_rs=T_use_rt=0，不修改寄存器。&lt;/li&gt;
&lt;li&gt;立即数 j 类型。不使用寄存器，jal 修改寄存器且 T_new_D=1。&lt;/li&gt;
&lt;li&gt;寄存器 j 类型。T_use_rs=0。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以看出，在数据通路方面，存在使用寄存器和使用立即数的差别，以及是否经过 ALU 计算的差别，对相应的通路和算术类型，修改控制信号 ALUMode 和 ALUBSrc。&lt;/li&gt;
&lt;li&gt;在暂停转发的控制上，可以将每个指令分成两方面，即读寄存器方面和写寄存器方面。
&lt;ul&gt;
&lt;li&gt;如果不读寄存器，则无暂停转发，在本人设计中即不需要改动 T_use_rs=T_use_rt，设置为默认值。如果需要读寄存器，那么需要把 T_use_rs，T_use_rt 设置到对应值上。这里还需要注意，&lt;strong&gt;可能存在指令使用的寄存器并不是 rs 和 rt 域对应的寄存器，这时候需要修改 D 级的数据通路，通过添加多路选择器将其整合到 rs/rt 中，或者新增加一个流水信号持续下传；同时设置好相应的 T_use_（）值以及 MuxSrc&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;写寄存器方面。如果不写，对转发暂停无影响，RegWrite 和 T_new 保持默认值即可。如果写，RegWrite 和 T_new 设置到相应值。&lt;strong&gt;同样的，如果写的寄存器不是 rd/rt/0x1f，那么要增加 A3Src 的来源和 A3Src 控制信号。这里特别需要注意的是，A3 不一定在 D 级就已经知道，在这种情况下，需要在后面的流水级多加 MUX 和 MUXSrc 信号，并且如果之后有读寄存器信号，如果 max {T_new_A3,T_new_Data}&amp;gt;T_use, 那么需要暂停。其余需要转发&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;思考题 7：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本译码器为集中译码，在 D 级输入 Opcode 和 Funct，译码出指令类型，并以此译码形成模式控制信号，是能控制信号和多路选择器信号（记录每个信号取值对应的指令类型）。同时也输入了 EMW 级的寄存器写使能和 A3 信号，直接在 D 级判断了暂停和转发情况，产生暂停信号或转发选择信号。&lt;/li&gt;
&lt;li&gt;优点是逻辑比较简单，写的代码行数较少；且集中在一个模块内，便于排查错误。不足之处则是需要传递大量的控制信号，流水线寄存器的规模比较大，端口众多且连线复杂，设计时比较麻烦，且不便于添加新的控制信号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="计算机组成" scheme="http://example.com/categories/computer-composition/" />
        <category term="mips" scheme="http://example.com/tags/mips/" />
        <category term="五级流水线CPU" scheme="http://example.com/tags/%E4%BA%94%E7%BA%A7%E6%B5%81%E6%B0%B4%E7%BA%BFCPU/" />
        <category term="Verilog HDL" scheme="http://example.com/tags/Verilog-HDL/" />
        <updated>2024-04-13T15:36:12.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/04/13/CO_P4_document/</id>
        <title>CO_P4_document</title>
        <link rel="alternate" href="http://example.com/2024/04/13/CO_P4_document/"/>
        <content type="html">&lt;h1 id=&#34;cpu设计文档及思考题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu设计文档及思考题&#34;&gt;#&lt;/a&gt; CPU 设计文档及思考题&lt;/h1&gt;
&lt;h2 id=&#34;设计草稿&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计草稿&#34;&gt;#&lt;/a&gt; 设计草稿&lt;/h2&gt;
&lt;h4 id=&#34;顶层模块设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顶层模块设计&#34;&gt;#&lt;/a&gt; 顶层模块设计&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在 P3 的基础上，将其顶层结构翻译映射为 Verilog HDL 的工程文件。&lt;/li&gt;
&lt;li&gt;因此，对 P3 文档稍加修订，得到顶层模块的工程设计如下
&lt;ul&gt;
&lt;li&gt;数据通路&lt;br /&gt;
&lt;img data-src=&#34;images/20d20ea83ec1ffd6106748bbebc5fc3683832d851e1f8f1052bb90d97a663cbe.png&#34; alt=&#34;图 2&#34; /&gt;&lt;/li&gt;
&lt;li&gt;控制
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;指令&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;NPCMode[1:0]&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;RegWrite&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ALUOp[3:0]&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;MemoryWrite&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ExtOp[1:0]&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ALUSrc[1:0]&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;GRFSrc[1:0]&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;GRFA3Src[1:0]&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;add&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0000&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;sub&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0001&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ori&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0010&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;01&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;lw&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0000&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;01&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;01&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;01&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;sw&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0000&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;01&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;01&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;beq&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;01&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0001&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;lui&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0011&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;01&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;jal&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xxxx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;jr&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;11&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xxxx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;nop&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;00&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xxxx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;xx&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;子模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子模块&#34;&gt;#&lt;/a&gt; 子模块&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;程序计数器 PC&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Clk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Reset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;同步复位到 0x00003000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;In&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;npc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Out&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pc&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下一指令运算器 NPC&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Mode&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;运算模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Zero&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALU 结果是否为零&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pc&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Imm&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input[25:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25 位立即数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ra&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ra&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pc4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC+4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;npc&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NPC&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指令存储器 IM&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input[13:2]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令的字节地址 - 0x00003000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Instr&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寄存器堆 GRF&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Clk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Reset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;同步复位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;WE&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A1[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 1 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A2[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 2 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A3[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 3 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;WD[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写入数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D1[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读出数据 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D2[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读出数据 2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制器 Controller&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Opcode[5:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Funct[5:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NPCMode&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output[2:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NPC 模式使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RegWrite&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;GRF 写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALUSrc[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B 为寄存器 / 立即数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALUOp[3:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALU 模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MemoryWrite&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DM 写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ExtOp[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXT 使能和模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;GRFSrc[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALU/DM 回写&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算术逻辑运算单元 ALU&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALUOp[3:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;C[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;运算结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Zero&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;结果是否为零&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据存储器 DM&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Clk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Reset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;同步复位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;En&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Data[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读出数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结合上述模块输入输出和连接关系，做出各个子模块以及顶层架构，下面展示了顶层架构：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;module mips(
    input clk,
    input reset
    );
    NPC npc(.mode(controller.NPCMode),
	         .Zero(alu.Zero),
	         .pc(pc.out),
				.imm(im.Instr[25:0]),
				.ra(grf.RD1));
				
    PC pc(.clk(clk),
	       .reset(reset),
			 .in(npc.npc));
	 
    wire [31:0] IM_Addr;
    assign IM_Addr = pc.out - 32&#39;h0000_3000;	 
	 IM im(.A(IM_Addr[13:2]));		 

    GRF grf(.clk(clk),
            .reset(reset),
            .WE(controller.RegWrite),
				.A1(im.Instr[25:21]),
				.A2(im.Instr[20:16]),
				.A3(mux_grf_A3.B),
				.WD(mux_grf_D.B),
				.pc(pc.out));				

    ALU alu(.A(grf.RD1),
	         .B(mux_alu_B.B),
				.ALUOp(controller.ALUOp));

    DM dm(.clk(clk),
	       .reset(reset),
			 .WE(controller.MemoryWrite),
			 .A(alu.C[13:0]),
			 .D(grf.RD2),
			 .pc(pc.out));
			 
	 EXT ext(.imm(im.Instr[15:0]),
	         .EXTOp(controller.EXTOp));		 

    MUX_5_4 mux_grf_A3(.A0(im.Instr[15:11]),
	                    .A1(im.Instr[20:16]),
							  .A2(5&#39;h1f),
							  .chose(controller.GRFA3Src));
    
	 MUX_32_4 mux_grf_D(.A0(alu.C),
	                    .A1(dm.Data),
							  .A2(npc.pc4),
							  .chose(controller.GRFSrc));

    MUX_32_4 mux_alu_B(.A0(grf.RD2),
	                    .A1(ext.ext),
							  .chose(controller.ALUSrc));

    Controller controller(.Opcode(im.Instr[31:26]),
	                       .Funct(im.Instr[5:0]));

endmodule
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;测试方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试方案&#34;&gt;#&lt;/a&gt; 测试方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;思路
&lt;ul&gt;
&lt;li&gt;沿用 P3 测试的思路和方法，重用其代码。可以完成 add,sub,ori,lw,sw,lui,nop 等运算和访存指令的测试。&lt;/li&gt;
&lt;li&gt;下面是 P3 的测试方案：&lt;br /&gt;
&lt;img data-src=&#34;images/02db9f3d2ce45e0f9ffcc12a5701929ea7b1331d33d1f6f0af782ca68522e95e.png&#34; alt=&#34;图 0&#34; /&gt;&lt;br /&gt;
 例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;
#include&amp;lt;time.h&amp;gt;
#define BATCH_SIZE 50

FILE *pCode;

int main() &amp;#123;
    srand((unsigned int)time(0));
    pCode = fopen(&amp;quot;mips_code.txt&amp;quot;,&amp;quot;w&amp;quot;);
    char s[120];
    int i;
    for (i = 0; i&amp;lt; 32; i++) &amp;#123;
            sprintf(s,&amp;quot;ori $%d,$%d,%d\n&amp;quot;,i,i + 1,0);
            fprintf(pCode,s);
    &amp;#125;
    fclose(pCode);
    pCode = fopen(&amp;quot;mips_code_ori1.txt&amp;quot;,&amp;quot;w&amp;quot;);
    for (i = 0; i&amp;lt; 32; i++) &amp;#123;
            sprintf(s,&amp;quot;ori $%d,$%d,%d\n&amp;quot;,i,i + 1,0xffff);
            fprintf(pCode,s);
    &amp;#125;
    fclose(pCode);
    pCode = fopen(&amp;quot;mips_code_ori2.txt&amp;quot;,&amp;quot;w&amp;quot;);
    for (i = 0 ; i &amp;lt; BATCH_SIZE; i++) &amp;#123;
        sprintf(s,&amp;quot;ori $%d,$%d,%d\n&amp;quot;,rand()% 32,rand()%32,rand()%0x10000);
        fprintf(pCode,s);
    &amp;#125;
    fclose(pCode);
    return 0;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;对于 beq,jal,jr 等命令，手动编写了若干条指令进行测试。&lt;br /&gt;
例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;.data

.text
jal loop
beq $t1,$t2,end
ori $t1,$0,114
loop:
ori $t1,$0,100
ori $t2,$t1,0
jr $ra
beq $0,$0,loop
end:

&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;思考题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思考题&#34;&gt;#&lt;/a&gt; 思考题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;思考题 1：
&lt;ul&gt;
&lt;li&gt;在课下实验中该 addr 信号从 ALU 的输出端口 C 来，这是因为访存时候的寻址通常是基址寻址，地址由 ALU 计算得到；但若有其他寻址方式，则还有可能从 EXT，GRF 等地方读取而来。&lt;/li&gt;
&lt;li&gt;由 ALU 计算得到的地址是字节地址，但 DM 中的数据索引是字地址，因此应该将字节地址除以四得到字地址，即 addr [11:2]。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 2：
&lt;ul&gt;
&lt;li&gt;对于记录 “指令对应的控制信号如何取值”, 以其中一条指令 add 为例：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt; if(add) begin
 NPCMode = 3&#39;b000;
 RegWrite = 1&#39;b1;
 ALUOp = 4&#39;b0000;
 MemoryWrite = 0;
 EXTOp = 2&#39;b00;
 ALUSrc = 2&#39;b00;
 GRFA3Src = 2&#39;b00;
 GRFSrc = 2&#39;b00;
 end
&lt;/code&gt;&lt;/pre&gt;
记录每种指令对应信号的方式便于以指令为单位进行代码逻辑的查看，不同指令之间不进行耦合，有利于消除不同指令之间的逻辑冲突，能够减少 bug，也有利于直接添加指令。缺点则是代码数量偏大，每增加一个指令就需要重写全部控制信号，相当于不进行代码的复用，且检查时工作量较大。
&lt;ul&gt;
&lt;li&gt;对于记录 “控制信号每种取值所对应的指令” 的编码方式，与搭建电路时采用或门阵列一致，示例代码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    NPCMode[0] = beq | jr;
 	NPCMode[1] = jal | jr; 
 	NPCMode[2] = 0;
    RegWrite = add | sub | ori | lw | lui | jal;
 	ALUOp[0] = sub | beq | lui;
 	ALUOp[1] = ori | lui;
 	ALUOp[2] = 0;
 	ALUOp[3] = 0;
 	MemoryWrite = sw;
 	EXTOp[0] = lw | sw;
 	EXTOp[1] = 0;
 	ALUSrc[0] = ori | lw | sw | lui;
 	ALUSrc[1] = 0;
 	GRFA3Src[0] = ori | lw | lui;
 	GRFA3Src[1] = jal;
 	GRFSrc[0] = lw;
 	GRFSrc[1] = jal;
&lt;/code&gt;&lt;/pre&gt;
这种方式与实际实现的电路有良好的对应关系。代码量明显较少，编写和修改时工作量较小，无需列出控制信号取 0 时的指令。但是不同指令耦合在一起，修复错误和增加指令时更容易出现逻辑问题；并且为了使得代码清晰，将控制信号不同位拆开表示。考虑到已经写清楚控制逻辑真值表理清逻辑，故采用此方式。&lt;/li&gt;
&lt;li&gt;思考题 3：
&lt;ul&gt;
&lt;li&gt;（以上升沿 + 高电平有效为例）异步复位当中复位信号的优先级比时钟信号要高，只要复位信号为高电平，不论时钟信号是什么，立即复位。即&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;always @(posedge clk,posedge reset) begin
  if(reset) begin
    /*reset*/
  end
  /*code*/
end
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;同步复位当中时钟信号的优先级比复位信号要高，当且仅当时钟上升沿时复位信号为高电平才进行复位，将有一个周期无其他操作。即：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;always @(posedge clk) begin
  if(reset) begin
    /*reset*/
  end
  /*code*/
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;思考题 4：&lt;br /&gt;
addu 相比于 add 指令，其操作多了&lt;pre&gt;&lt;code class=&#34;language-temp&#34;&gt;if temp32 ≠ temp31 then
SignalException(IntegerOverflow)
&lt;/code&gt;&lt;/pre&gt;
部分，即溢出检查，若忽略溢出，不进行检查，则操作为 else 部分&lt;pre&gt;&lt;code&gt;else
GPR[rd] ← temp
endif
&lt;/code&gt;&lt;/pre&gt;
和 add 完全相同。因此，忽略溢出时，add 与 addu 是等价的。addi 和 addiu 同理。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="计算机组成" scheme="http://example.com/categories/computer-composition/" />
        <category term="单周期CPU" scheme="http://example.com/tags/%E5%8D%95%E5%91%A8%E6%9C%9FCPU/" />
        <category term="mips" scheme="http://example.com/tags/mips/" />
        <category term="Verilog HDL" scheme="http://example.com/tags/Verilog-HDL/" />
        <updated>2024-04-13T15:36:11.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2024/04/13/CO_P3_document/</id>
        <title>CO_P3_document</title>
        <link rel="alternate" href="http://example.com/2024/04/13/CO_P3_document/"/>
        <content type="html">&lt;h1 id=&#34;cpu设计文档及思考题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cpu设计文档及思考题&#34;&gt;#&lt;/a&gt; CPU 设计文档及思考题&lt;/h1&gt;
&lt;h2 id=&#34;设计草稿&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#设计草稿&#34;&gt;#&lt;/a&gt; 设计草稿&lt;/h2&gt;
&lt;h4 id=&#34;顶层模块草稿&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顶层模块草稿&#34;&gt;#&lt;/a&gt; 顶层模块草稿&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;整个 CPU 模块大致分为上游和下游两个有限状态机。上游是&lt;em&gt; Moore&lt;/em&gt; 型的取指模块，输出将要执行的下一条指令；下游则是&lt;em&gt; Mealy&lt;/em&gt; 型的译码、执行、访存、回写全过程模块。&lt;/li&gt;
&lt;li&gt;各个子模块以及粗略连接关系的初版草稿如下图所示。接下来，将要详细讨论各个模块的输入输出和连接关系。&lt;br /&gt;
&lt;img data-src=&#34;images/2d704fb9acf79ce89de3c7cbe2eef1b921d488e0329c2a7f3e6329423d322d9b.jpg&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;顶层模块工程设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#顶层模块工程设计&#34;&gt;#&lt;/a&gt; 顶层模块工程设计&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;每条指令相应数据通路如下表所示。&lt;br /&gt;
&amp;lt;table&amp;gt;&lt;br /&gt;
&amp;lt;tr&amp;gt;&lt;br /&gt;
&amp;lt;td rowspan = &amp;quot;2&amp;quot;&amp;gt; 指令 &amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td colspan = &amp;quot;4&amp;quot;&amp;gt;GRF&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;EXT&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td colspan = &amp;quot;2&amp;quot;&amp;gt;ALU&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td colspan = &amp;quot;2&amp;quot;&amp;gt;DM&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;/tr&amp;gt;&lt;br /&gt;
&amp;lt;tr&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;Beq&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;A1&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;A2&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;A3&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;WD&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;Imm&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;A&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;B&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;A&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;WD&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;/tr&amp;gt;&lt;br /&gt;
&amp;lt;tr&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;add&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[25:21]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[20:16]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[15:11]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;ALU.C&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;GRF.D1&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;GRF.D2&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;/tr&amp;gt;&lt;br /&gt;
&amp;lt;tr&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;sub&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[25:21]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[20:16]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[15:11]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;ALU.C&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;GRF.D1&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;GRF.D2&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;/tr&amp;gt;&lt;br /&gt;
&amp;lt;tr&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;ori&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[25:21]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[20:16]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;ALU.C&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[15:0]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;GRF.D1&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;EXT.ext&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;/tr&amp;gt;&lt;br /&gt;
&amp;lt;tr&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;lw&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[25:21]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[20:16]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;DM.Data&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[15:0]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;GEF.D1&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;EXT.ext&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;ALU.C&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;/tr&amp;gt;&lt;br /&gt;
&amp;lt;tr&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;sw&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[25:21]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[20:16]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[15:0]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;GRF.D1&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;EXT.ext&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;ALU.C&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;GRF.D2&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;/tr&amp;gt;&lt;br /&gt;
&amp;lt;tr&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;lui&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[20:16]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;ALU.C&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[15:0]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;EXT.ext&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;/tr&amp;gt;&lt;br /&gt;
&amp;lt;tr&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;beq&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;ALU.Zero&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[25:21]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;IFU.Instr[20:16]&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;GRF.D1&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;GRF.D2&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;br /&gt;
&amp;lt;/tr&amp;gt;&lt;br /&gt;
&amp;lt;/table&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;子模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子模块&#34;&gt;#&lt;/a&gt; 子模块&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;取指令单元 IRU&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Clk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Reset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;异步复位 PC 到 0x00003000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Beq&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;跳转&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pc&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Instr&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;下一条指令&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寄存器堆 GRF&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Clk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Reset&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;异步复位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;WE&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A1[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 1 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A2[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 2 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A3[4:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 3 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;WD[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写入数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D1[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读出数据 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D2[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读出数据 2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制器 Controller&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Opcode[5:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Funct[5:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;BeqEn&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是否为 beq&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RegWrite&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;GRF 写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALUSrc&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B 为寄存器 / 立即数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALUOp[3:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALU 模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MemoryWrite&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DM 写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ExtOp[1:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXT 使能和模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Mem2Reg&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALU/DM 回写&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算术逻辑运算单元 ALU&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B[31:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;操作数 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ALUOp[3:0]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;C&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;运算结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Zero&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;结果是否为零&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据存储器 DM&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Clk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;En&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写使能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;D&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;写数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Data&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;读出数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结合上述模块输入输出和连接关系，画出如下顶层草稿：&lt;img data-src=&#34;images/7a4b4ed583106fa9a117b40a86634518e4eee98aba539912f218986154cdbe92.png&#34; alt=&#34;图 0&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;二级子模块和模块实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二级子模块和模块实现&#34;&gt;#&lt;/a&gt; 二级子模块和模块实现&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IFU&lt;br /&gt;
&lt;img data-src=&#34;images/2d47a31b09fa074c2b0dc29091111985eefa5f302e2aee97ce357882e83e940c.jpg&#34; alt=&#34;图 4&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PC(IFU)
&lt;ul&gt;
&lt;li&gt;寄存器加上异步复位到 0x00003000 功能，采用寄存器复位时复位至 0，因此需要在寄存器前将传入下一状态 - 0x00003000, 寄存器下游再 + 0x00003000。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NPC（IFU）
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;信号名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;方向&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Inuput&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;当前 PC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Instr&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Input&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;当前指令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NPC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;下一个 PC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Output&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC+4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;IM(IFU)
&lt;ul&gt;
&lt;li&gt;是一个 ROM，为了使得 PC 的输出与 DM 实际地址相匹配，将 pc-0x00003000 再右移两位得到 addr。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Controller&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考理论课讲解和教程，由 Contrller_AND 译码，其输入为 Opcode 和 FunctCode，输出为各指令独热码。&lt;img data-src=&#34;images/59600af2d70e65619c614245b8ab0b97d3a535dfdde6ef74bfa407d89bf5aaa5.jpg&#34; alt=&#34;图 1&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Controller_OR 释放控制信号，输入为指令的独热码，输出为上述各控制信号。&lt;img data-src=&#34;images/7421e5e8c50e86b6635911f9ec1a9e313543a7691bed177bf83d7afe9feedd7e.jpg&#34; alt=&#34;图 2&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ALU&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据控制信号分别进行计算，结果由多路选择器选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#测试方案&#34;&gt;#&lt;/a&gt; 测试方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;思路：
&lt;ul&gt;
&lt;li&gt;编写 MIPS 代码，在 MARS 上运行并查看寄存器和内存的数值；将 MIPS 代码转换为机器代码后导入 Logisim 的 ROM 中并运行，之后查看 logisim 当中的 GRF 和 DM 数据和 MARS 中是否一致。&lt;/li&gt;
&lt;li&gt;根据教程，先测试不依赖于其他指令，但其他指令测试需要用到的指令，如 ori，lui; 先测试 sw,lw 指令，再测试 add，sub 等指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据构造：
&lt;ul&gt;
&lt;li&gt;进行测试的数据应该覆盖广泛，包括正数与负数，绝对值大的数，和零附近的数字；测试覆盖全部寄存器。&lt;/li&gt;
&lt;li&gt;测试数据应包含边界条件，如包括 0；包括 0xffff 等首位为 1 的立即数以测试扩展方式的正确性；跳转指令包含跳转到自己的指令。&lt;/li&gt;
&lt;li&gt;应用大批随机数进行测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自动化
&lt;ul&gt;
&lt;li&gt;手动编写代码测试并比对的工作过于繁重，因此利用程序生成 MIPS 代码，如使用 C 测试 ori 测试指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;
#include&amp;lt;time.h&amp;gt;
#define BATCH_SIZE 50

FILE *pCode;

int main() &amp;#123;
  srand((unsigned int)time(0));
  pCode = fopen(&amp;quot;mips_code.txt&amp;quot;,&amp;quot;w&amp;quot;);
  char s[120];
  int i;
  for (i = 0; i&amp;lt; 32; i++) &amp;#123;
          sprintf(s,&amp;quot;ori $%d,$%d,%d\n&amp;quot;,i,i + 1,0);
          fprintf(pCode,s);
  &amp;#125;
  fclose(pCode);
  pCode = fopen(&amp;quot;mips_code_ori1.txt&amp;quot;,&amp;quot;w&amp;quot;);
  for (i = 0; i&amp;lt; 32; i++) &amp;#123;
          sprintf(s,&amp;quot;ori $%d,$%d,%d\n&amp;quot;,i,i + 1,0xffff);
          fprintf(pCode,s);
  &amp;#125;
  fclose(pCode);
  pCode = fopen(&amp;quot;mips_code_ori2.txt&amp;quot;,&amp;quot;w&amp;quot;);
  for (i = 0 ; i &amp;lt; BATCH_SIZE; i++) &amp;#123;
      sprintf(s,&amp;quot;ori $%d,$%d,%d\n&amp;quot;,rand()% 32,rand()%32,rand()%0x10000);
      fprintf(pCode,s);
  &amp;#125;
  fclose(pCode);
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
其他相关代码（产生 add_sub）：&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;string.h&amp;gt;

int main() &amp;#123;
  int i,j,k=0;
  for ( i = 0; i &amp;lt; 4; i++)
  &amp;#123;
      for(j=i;j&amp;lt;4;j++,k++) &amp;#123;
          printf(&amp;quot;add $s%d,$t%d,$t%d\n&amp;quot;,0,i*2,j*2+1);
          printf(&amp;quot;sw $s0,%d($0)\n&amp;quot;,k*4);
      &amp;#125;
  &amp;#125;
  for ( i = 0; i &amp;lt; 4; i++)
  &amp;#123;
      for(j=i;j&amp;lt;4;j++,k++) &amp;#123;
          printf(&amp;quot;sub $s%d,$t%d,$t%d\n&amp;quot;,0,i*2,j*2+1);
          printf(&amp;quot;sw $s0,%d($0)\n&amp;quot;,k*4);
      &amp;#125;
  &amp;#125;
  return 0;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;.data

.text
ori $t0,$0,3
ori $t1,$0,4
lui $t2,0xffff
ori $t2,$t2,0xffff
lui $t3,0xffff
ori $t3,$t3,0xfffd
lui $t4,0x7fff
ori $t4,$t4,0xffff
lui $t5,0x7fee
ori $t5,$t5,0xfeff
lui $t6,0x8000
ori $t6,$t6,0x0000
lui $t7,0x8000
ori $t7,$t7,0x0003
add $s0,$t0,$t1
sw $s0,0($0)
add $s0,$t0,$t3
sw $s0,4($0)
add $s0,$t0,$t5
sw $s0,8($0)
add $s0,$t0,$t7
sw $s0,12($0)
add $s0,$t2,$t3
sw $s0,16($0)
add $s0,$t2,$t5
sw $s0,20($0)
add $s0,$t2,$t7
sw $s0,24($0)
add $s0,$t4,$t5
sw $s0,28($0)
add $s0,$t4,$t7
sw $s0,32($0)
add $s0,$t6,$t7
sw $s0,36($0)
sub $s0,$t0,$t1
sw $s0,40($0)
sub $s0,$t0,$t3
sw $s0,44($0)
sub $s0,$t0,$t5
sw $s0,48($0)
sub $s0,$t0,$t7
sw $s0,52($0)
sub $s0,$t2,$t3
sw $s0,56($0)
sub $s0,$t2,$t5
sw $s0,60($0)
sub $s0,$t2,$t7
sw $s0,64($0)
sub $s0,$t4,$t5
sw $s0,68($0)
sub $s0,$t4,$t7
sw $s0,72($0)
sub $s0,$t6,$t7
sw $s0,76($0)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;MARS 结果与 Logisim 结果的自动对比目前还没有实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;思考题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#思考题&#34;&gt;#&lt;/a&gt; 思考题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;思考题 1：
&lt;ul&gt;
&lt;li&gt;在 CPU 上游模块&lt;em&gt; Moore&lt;/em&gt; 机中，发挥状态存储功能的是程序计数器 PC，发挥状态转移功能的是计算下个 pc 的 NPC。&lt;/li&gt;
&lt;li&gt;在 CPU 下游模块&lt;em&gt; Mealy&lt;/em&gt; 机中，发挥状态存储功能的是寄存器堆 GRF，CPU 之外的 DM；发挥状态转移功能的是控制器 Controller，运算器 ALU 和扩展单元 EXT 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 2：
&lt;ul&gt;
&lt;li&gt;在本次实验的要求下，此设计是合理的。
&lt;ul&gt;
&lt;li&gt;本实验当中，IM 中的指令相当于预置完成，在 CPU 执行过程当中，无需进行修改，且指令数量庞大，因此使用只读的存储阵列 ROM 比较合理。&lt;/li&gt;
&lt;li&gt;GRF 存储三十二个三十二位二进制数，且要求可读可写。由于数量较少且对速度要求高，不宜使用大型阵列 RAM。另外由于访问地址是 5 位且 0 号要特殊处理，直接使用寄存器实现比较合适。&lt;/li&gt;
&lt;li&gt;DM 是要求可读可写的大型数据存储器，使用 RAM 比较合适。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在真实的处理器当中，IM 要求可写，否则始终只能运行同一程序。因此不能够使用 ROM。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 3：
&lt;ul&gt;
&lt;li&gt;尚未设计其他完整的模块，但是对一些模块预留了一些接口，程序具有可扩展性。比如考虑到部分跳转相关指令可能需要将 PC+4 存入 GRF，因此 IFU 添加了 PC4 输出，也增加了新控制信号输入以及 32 位数字输入。扩展了 GRF 的 WD,A3 选择器宽度。ALUOp 预留若干位。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 4：
&lt;ul&gt;
&lt;li&gt;nop 对应汇编语句为 &amp;lt;kbd&amp;gt;sll $0,$0,0&amp;lt;/kbd&amp;gt; , 相当于不进行任何操作，RegWrite，MemWrite 等控制信号均为零。由于控制器的控制信号释放均由或门实现，故释放的控制信号均为 0 的 nop 指令无需加入控制信号真值表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考题 5:
&lt;ul&gt;
&lt;li&gt;测试点的数据不够强。指令集当中有 sub 和 nop 未进行测试。&lt;/li&gt;
&lt;li&gt;各个指令的情况：
&lt;ul&gt;
&lt;li&gt;ori 指令，lui 指令基本符合测试要求，但可以进行更多数据的测试。&lt;/li&gt;
&lt;li&gt;add 指令覆盖了正负数情况，但缺少 0 的测试，且其测试缺少较大整数（如计算完溢出，不过该情况无法在 MARS 上检查，可能要手动检查）和零附近整数的情况。&lt;/li&gt;
&lt;li&gt;sw，lw 指令测试较强。&lt;/li&gt;
&lt;li&gt;beq 指令覆盖了相等和不等的情况，但是只有向后跳转，没有跳转到自身和跳转到之前的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="计算机组成" scheme="http://example.com/categories/computer-composition/" />
        <category term="单周期CPU" scheme="http://example.com/tags/%E5%8D%95%E5%91%A8%E6%9C%9FCPU/" />
        <category term="mips" scheme="http://example.com/tags/mips/" />
        <category term="Logisim" scheme="http://example.com/tags/Logisim/" />
        <updated>2024-04-13T15:36:10.000Z</updated>
    </entry>
</feed>
